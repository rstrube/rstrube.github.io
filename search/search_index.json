{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"tags/","title":"Tags","text":"","tags":[]},{"location":"tags/#apt","title":"apt","text":"<ul> <li>Apt Cheat Sheet</li> </ul>","tags":[]},{"location":"tags/#arch-linux","title":"arch linux","text":"<ul> <li>Setting up Arch Linux ARM on Cubox-i</li> <li>Remove Lockout on Arch Linux</li> </ul>","tags":[]},{"location":"tags/#azure","title":"azure","text":"<ul> <li>Using AzCopy to Copy Blobs to Azure</li> </ul>","tags":[]},{"location":"tags/#cheat-sheet","title":"cheat sheet","text":"<ul> <li>.NET CLI Cheat Sheet</li> <li>Git Cheat Sheet</li> <li>Javascript Import Export Cheat Sheet</li> <li>Lodash Cheat Sheet</li> <li>Optimizely B2C Commerce Cheat Sheet</li> <li>Optimizely CMS Cheat Sheet</li> <li>Vim Cheat Sheet</li> <li>Apt Cheat Sheet</li> <li>DD Cheat Sheet</li> <li>Shell Cheat Sheet</li> <li>Tar Cheat Sheet</li> <li>Wayland Cheat Sheet</li> </ul>","tags":[]},{"location":"tags/#code-example","title":"code example","text":"<ul> <li>Minimal .NET Console Application with IoC</li> <li>Building a React Client-Side Web Application from Scratch</li> </ul>","tags":[]},{"location":"tags/#csharp","title":"csharp","text":"<ul> <li>Cleaner Code Through Inverted Logic</li> <li>Minimal .NET Console Application with IoC</li> </ul>","tags":[]},{"location":"tags/#dd","title":"dd","text":"<ul> <li>DD Cheat Sheet</li> </ul>","tags":[]},{"location":"tags/#development","title":"development","text":"<ul> <li>Cleaner Code Through Inverted Logic</li> <li>Using AzCopy to Copy Blobs to Azure</li> <li>.NET CLI Cheat Sheet</li> <li>Minimal .NET Console Application with IoC</li> <li>Git Cheat Sheet</li> <li>Javascript Import Export Cheat Sheet</li> <li>Lodash Cheat Sheet</li> <li>Starter Template Combining Foam + Material for MkDocs</li> <li>Building a React Client-Side Web Application from Scratch</li> <li>SQL Server in a Docker Container on Linux</li> <li>Vim Cheat Sheet</li> </ul>","tags":[]},{"location":"tags/#dns","title":"dns","text":"<ul> <li>Systemd Resolved</li> </ul>","tags":[]},{"location":"tags/#docker","title":"docker","text":"<ul> <li>SQL Server in a Docker Container on Linux</li> </ul>","tags":[]},{"location":"tags/#dotnet","title":"dotnet","text":"<ul> <li>.NET CLI Cheat Sheet</li> <li>Minimal .NET Console Application with IoC</li> </ul>","tags":[]},{"location":"tags/#electron","title":"electron","text":"<ul> <li>Wayland Cheat Sheet</li> </ul>","tags":[]},{"location":"tags/#external","title":"external","text":"<ul> <li>Starter Template Combining Foam + Material for MkDocs</li> <li>Building a React Client-Side Web Application from Scratch</li> </ul>","tags":[]},{"location":"tags/#foam","title":"foam","text":"<ul> <li>Starter Template Combining Foam + Material for MkDocs</li> </ul>","tags":[]},{"location":"tags/#git","title":"git","text":"<ul> <li>Git Cheat Sheet</li> </ul>","tags":[]},{"location":"tags/#hardware","title":"hardware","text":"<ul> <li>Setting up Arch Linux ARM on Cubox-i</li> </ul>","tags":[]},{"location":"tags/#javascript","title":"javascript","text":"<ul> <li>Javascript Import Export Cheat Sheet</li> <li>Lodash Cheat Sheet</li> </ul>","tags":[]},{"location":"tags/#kde","title":"kde","text":"<ul> <li>Enabling and Disabling KDE Compositor</li> </ul>","tags":[]},{"location":"tags/#kvm-qemu","title":"kvm qemu","text":"<ul> <li>Disk Image Shrinking for Windows Guests</li> <li>Installing Windows as a Guest on KVM QEMU</li> <li>KVM QEMU AMD CPU Configuration</li> <li>KVM QEMU CPU Pinning</li> </ul>","tags":[]},{"location":"tags/#linux","title":"linux","text":"<ul> <li>SQL Server in a Docker Container on Linux</li> <li>Setting up Arch Linux ARM on Cubox-i</li> <li>Apt Cheat Sheet</li> <li>DD Cheat Sheet</li> <li>Shell Cheat Sheet</li> <li>Tar Cheat Sheet</li> <li>Remove Lockout on Arch Linux</li> <li>Enabling and Disabling KDE Compositor</li> <li>Wayland Cheat Sheet</li> <li>Systemd Core Dumps</li> <li>Systemd Journal Logging</li> <li>Systemd Resolved</li> </ul>","tags":[]},{"location":"tags/#lodash","title":"lodash","text":"<ul> <li>Lodash Cheat Sheet</li> </ul>","tags":[]},{"location":"tags/#mkdocs","title":"mkdocs","text":"<ul> <li>Starter Template Combining Foam + Material for MkDocs</li> </ul>","tags":[]},{"location":"tags/#optimizely","title":"optimizely","text":"<ul> <li>Optimizely B2C Commerce Cheat Sheet</li> <li>Optimizely CMS Braindump</li> <li>Optimizely CMS Cheat Sheet</li> </ul>","tags":[]},{"location":"tags/#react","title":"react","text":"<ul> <li>Building a React Client-Side Web Application from Scratch</li> </ul>","tags":[]},{"location":"tags/#sbc","title":"sbc","text":"<ul> <li>Setting up Arch Linux ARM on Cubox-i</li> </ul>","tags":[]},{"location":"tags/#shell","title":"shell","text":"<ul> <li>DD Cheat Sheet</li> <li>Shell Cheat Sheet</li> <li>Tar Cheat Sheet</li> </ul>","tags":[]},{"location":"tags/#sql-server","title":"sql server","text":"<ul> <li>SQL Server in a Docker Container on Linux</li> </ul>","tags":[]},{"location":"tags/#systemd","title":"systemd","text":"<ul> <li>Systemd Core Dumps</li> <li>Systemd Journal Logging</li> <li>Systemd Resolved</li> </ul>","tags":[]},{"location":"tags/#tar","title":"tar","text":"<ul> <li>Tar Cheat Sheet</li> </ul>","tags":[]},{"location":"tags/#vim","title":"vim","text":"<ul> <li>Vim Cheat Sheet</li> </ul>","tags":[]},{"location":"tags/#virtualization","title":"virtualization","text":"<ul> <li>Disk Image Shrinking for Windows Guests</li> <li>Installing Windows as a Guest on KVM QEMU</li> <li>KVM QEMU AMD CPU Configuration</li> <li>KVM QEMU CPU Pinning</li> </ul>","tags":[]},{"location":"tags/#wayland","title":"wayland","text":"<ul> <li>Wayland Cheat Sheet</li> </ul>","tags":[]},{"location":"tags/#webpack","title":"webpack","text":"<ul> <li>Building a React Client-Side Web Application from Scratch</li> </ul>","tags":[]},{"location":"tags/#windows","title":"windows","text":"<ul> <li>Disk Image Shrinking for Windows Guests</li> <li>Installing Windows as a Guest on KVM QEMU</li> </ul>","tags":[]},{"location":"development/cleaner-code-through-inverted-logic/","title":"Cleaner Code Through Inverted Logic","text":"<p>Last updated: 2023-01-10</p>","tags":["development","csharp"]},{"location":"development/cleaner-code-through-inverted-logic/#introduction","title":"Introduction","text":"<p>One of the best ways to improve the readability and management of your code is to invert your conditional logic.  Sometimes I refer to this as \"putting your short-circuit conditions up front\".  This takes a little while to get used to, as we're more inclined to think of our logic through the lens of a \"happy-path\" flow (e.g. what are the conditions to continue) rather than the conditions to halt executing or return an error.</p> <p>It also doesn't help that many CS professors preach \"You should only a single return statement\" for a given method.  This single manta has caused an egregious amount of ugly code to be created!</p> <p>Over the past 10 years or so, more developers are embracing logic inversion.  Resharper even has a built code inspection tool that will handle performing this refactor for you!</p> <p>To better illustrate this concept lets take a look at some code examples.</p> <p>Note</p> <p>All of the examples provided here are written in C#, but the concepts can apply to virtually any language.  I often use similar approaches for Javascript, etc.</p>","tags":["development","csharp"]},{"location":"development/cleaner-code-through-inverted-logic/#example-class-business-logic","title":"Example Class &amp; Business Logic","text":"<p>First let's define a plain old class (POCO) that contains a few basic properties.  This class will be used in all the subsequent code examples:</p> <p>Example POCO used in subsequent code examples</p> <pre><code>public class MyItem\n{\npublic int Id { get; set; }\npublic bool IsActive { get; set; }\npublic string? Value { get; set; }\n}\n</code></pre> <p>Let's also define some very simple business logic that we'll be required to implement in a service.  The service should contain a method with the following specifications:</p> <ul> <li> <p> Method input arguments are a <code>List&lt;MyItem&gt;</code> and a string value:</p> <ul> <li> If the string value is null or empty, throw an argument exception</li> <li> If the list is null or empty return null </li> </ul> </li> <li> <p> Method logic should attempt to match and return a single item from the list that:</p> <ul> <li> Is active</li> <li> Has a value == to the string input value</li> <li> If more than one item is active and matches the string input value, throw an exception</li> <li> If no items match, return null </li> </ul> </li> </ul> <p>Note</p> <p>I realize this business logic is a little ridiculous.  Don't focus too much on the business logic, but rather the way we implement it.</p>","tags":["development","csharp"]},{"location":"development/cleaner-code-through-inverted-logic/#nested-happy-path-logic-flow-example","title":"Nested \"Happy-Path\" Logic Flow Example","text":"<p>This first example shows a more traditional \"happy-path\" logic flow.  It follow the rule of only having a single <code>return</code>.</p> <p>Warning</p> <p>I personally consider the readability of this code to be quite poor and difficult to follow.  I'm only presenting this an an example of the kind of code you should avoid writing!</p> <p>Method using traditional happy-path logic flow, please avoid at all costs</p> <pre><code>public MyItem? GetItemNestedLogic(List&lt;MyItem&gt; items, string valueToMatch)\n{\nMyItem? matchedItem = null;\n\nif(!string.IsNullOrEmpty(valueToMatch))\n{\nif(items != null &amp;&amp; items.Count &gt; 0)\n{\nforeach(var item in items)\n{\nif(item.IsActive)\n{\nif(item.Value == valueToMatch)\n{\nif(matchedItem == null)\nmatchedItem = item;\n\nelse\nthrow new Exception(\"More than one item matches value\");\n}\n}\n\nelse\n{\n// log warning about item not being active\n// ...\n}\n}\n}\n\nreturn matchedItem;\n}\n\nelse\nthrow new ArgumentException(\"valueToMatch\");\n}\n</code></pre> <p>Unfortunately, I still encounter code like this all the time.  There are a number of problems with this code:</p> <ul> <li>Significant amount of if/else nesting</li> <li>Can be difficult to match the error actions (in the else blocks) with the corresponding if blocks</li> <li>Heavily dependent on indentation to read the code</li> <li>Need to scroll down to the bottom of the method to see that the method actually throws an exception when <code>valueToMatch</code> is null or empty</li> </ul>","tags":["development","csharp"]},{"location":"development/cleaner-code-through-inverted-logic/#inverted-logic-flow-example-without-linq","title":"Inverted Logic Flow Example (without Linq)","text":"<p>This second example shows how to invert your logic for cleaner, more readable code.</p> <p>Note</p> <p>I have deliberately chosen not to use Linq in this example to properly demonstrate how to invert the existing logic of the previous example!</p> <p>Method using inverted logic (without Linq)</p> <pre><code>public MyItem? GetItemInvertedWithoutLinq(List&lt;MyItem&gt; items, string valueToMatch)\n{\n// put all the short-circuit conditions up front\nif(string.IsNullOrEmpty(valueToMatch))\nthrow new ArgumentException(\"valueToMatch\");\n\nif(items == null || items.Count &lt; 0)\nreturn null;\n\nMyItem matchedItem = null;\n\nforeach(var item in items)\n{\n// put all the short-circuit conditions to skip iteration up front\nif(!item.IsActive)\n{\n// log warning about item not being active\n// ...\ncontinue;\n}\n\nif(item.Value != valueToMatch)\ncontinue;\n\nif(matchedItem != null)\nthrow new Exception(\"More than one item matches value\");\n\nmatchedItem = item;\n}\n\nreturn matchedItem;\n}\n</code></pre> <p>In my opinion this method is much easier to read.  You can scan through the method and see all the situations that would cause error conditions very easily.  You also don't have the deep level of nesting that was present in the previous example.</p>","tags":["development","csharp"]},{"location":"development/cleaner-code-through-inverted-logic/#inverted-logic-flow-example-with-linq","title":"Inverted Logic Flow Example (with Linq)","text":"<p>This example uses inverted logic for some initial short-circuit conditions, but also relies heavily upon Linq to do the iteration and matching.</p> <p>Method using inverted logic and Linq for matching</p> <pre><code>public MyItem? GetItemInvertedLinq(List&lt;MyItem&gt; items, string valueToMatch)\n{\nif(string.IsNullOrEmpty(valueToMatch))\nthrow new ArgumentException(\"valueToMatch\");\n\nif(items == null || items.Count &lt; 0)\nreturn null;\n\nreturn items.Where(item =&gt; item.IsActive &amp;&amp; item.Value == valueToMatch).SingleOrDefault();\n}\n</code></pre> <p>Info</p> <p>The <code>SingleOrDefault()</code> Linq method will return <code>null</code> if the <code>IEnumerable</code> is empty, and it will throw an exception if the <code>IEnumerable</code> contains more than one item.</p> <p>Note</p> <p>The eagle-eyed reader would notice that this example forgoes the ability to log when an item is not active.  I've chosen to omit this for now to demonstrate how concise Linq code can be.</p>","tags":["development","csharp"]},{"location":"development/cleaner-code-through-inverted-logic/#conclusion","title":"Conclusion","text":"<p>I hope the provided examples demonstrate how inverted logic can help make your code cleaner and easier to read and maintain.  We really need to have a talk with the CS professors that are stuck twenty years in the past!</p>","tags":["development","csharp"]},{"location":"development/azure/using-azcopy-to-copy-blobs-to-azure/","title":"Using AzCopy to Copy Blobs to Azure","text":"<p>Last updated: 2023-01-04</p> <ul> <li> If AzCopy is not installed download and install it from here.</li> <li> <p> Once installed, navigate to its directory in the Command Prompt or Powershell (run as admin!) <pre><code># location depends on which version you installed x64 or x86\n%ProgramFiles(x86)%\\Microsoft SDKs\\Azure\\AzCopy\n%ProgramFiles%\\Microsoft SDKs\\Azure\\AzCopy\n</code></pre></p> </li> <li> <p> Once navigated to install directory run the command: <pre><code>AzCopy /Source:&lt;source&gt; /Dest:&lt;destination&gt; [Options]\n\n# example:\n# note: `/S parameter is very important, allows it to recursively work through all files in specified &lt;source&gt; copying to a destination that is in azure works as well.\nAzCopy Source:https://myaccount.blob.core.windows.net/mycontainer  Dest:C:\\\\myfolder /SourceKey:key /S\n</code></pre></p> </li> <li> <p> Let the job run, this will take a long time depending on the size of the blobs directory</p> </li> </ul> <p>Example 1: Copy from file system to Azure blob container</p> <pre><code># change to the correct directory for AzCopy\ncd 'C:\\Program Files (x86)\\Microsoft SDKs\\Azure\\AzCopy'\n\n# copy all blobs from filesystem (`C:\\MyFolder\\blobs`) to azure blob container (myblobcontainer)\n./AzCopy /Source:C:\\MyFolder\\blobs /Dest:https://myblob.blob.core.windows.net/myblobcontainer /DestKey:ZyWowd7tK9Dt1zKp7hLTIwshTG6qk5okujwZFJ0nX+Y7uE97uI7SiUkQKCfcYdu/8uaRB+n2CqY0fdeDWBL6Hw== /S\n</code></pre> <p>Example 2: Copy from one blob container another blob container</p> <pre><code># change to the correct directory for AzCopy\ncd 'C:\\Program Files (x86)\\Microsoft SDKs\\Azure\\AzCopy'\n\n# copy all blobs from blob container (myblobcontainer) to another blob container (myblob2container)\n./AzCopy /Source:https://mybob.blob.core.windows.net/myblobcontainer /Dest:https://myblob2.blob.core.windows.net/myblob2container /SourceKey:ZyWowd7tK9Dt1zKp7hLTIwshTG6qk5okujwZFJ0nX+Y7uE97uI7SiUkQKCfcYdu/8uaRB+n2CqY0fdeDWBL6Hw== /DestKey:we8tVAovxZwyeBHgWPMFWJUcB3D8Eb1K8ls1Txss1lQy0D2up9QXrusoXGAIDLSWBlXfCm3mWMZraPlmEXXFwA== /S\n</code></pre> <p>See also:</p> <ul> <li>Get Started with AzCopy</li> </ul>","tags":["development","azure"]},{"location":"development/dotnet/dotnet-cli-cheat-sheet/","title":".NET CLI Cheat Sheet","text":"<p>Last updated: 2023-01-04</p> <p>Note</p> <p>The information pertains specifically to the CLI tool provided with .NET \"Core\" (e.g. .NET 5.x, 6.x, 7.x).  It does not apply to the legacy versions of .NET Framework (e.g. .NET 4.8)</p>","tags":["development","dotnet","cheat sheet"]},{"location":"development/dotnet/dotnet-cli-cheat-sheet/#creating-a-new-solution","title":"Creating a new solution","text":"<pre><code># create a sln file with name of the current folder\ndotnet new sln\n</code></pre> <p>Example</p> <p>If you run <code>dotnet new sln</code> in <code>/home/robert/Projects/MyProject</code>, the name of the <code>sln</code> file would be <code>MyProject.sln</code>.</p>","tags":["development","dotnet","cheat sheet"]},{"location":"development/dotnet/dotnet-cli-cheat-sheet/#creating-a-new-project","title":"Creating a new project","text":"<pre><code># create a .csproj file with name of the current folder\ndotnet new &lt;template&gt;\n</code></pre> <p>Example</p> <p>If you run <code>dotnet new console</code> in <code>/home/robert/Projects/MyProject/MyProject.Exec</code>, dotnet will create a new console project with a filename of <code>MyProject.Exec.csproj</code> at that location.</p> <p>Note</p> <p>You can list out template choices via <code>dotnet new -l</code></p> <pre><code>Template Name                                 Short Name          Language    Tags                            \n--------------------------------------------  ------------------  ----------  --------------------------------\nASP.NET Core Empty                            web                 [C#],F#     Web/Empty                       \nASP.NET Core gRPC Service                     grpc                [C#]        Web/gRPC                        \nASP.NET Core Web API                          webapi              [C#],F#     Web/WebAPI                      \nASP.NET Core Web App                          webapp,razor        [C#]        Web/MVC/Razor Pages             \nASP.NET Core Web App (Model-View-Controller)  mvc                 [C#],F#     Web/MVC                         \nASP.NET Core with Angular                     angular             [C#]        Web/MVC/SPA                     \nASP.NET Core with React.js                    react               [C#]        Web/MVC/SPA                     \nBlazor Server App                             blazorserver        [C#]        Web/Blazor                      \nBlazor Server App Empty                       blazorserver-empty  [C#]        Web/Blazor/Empty                \nBlazor WebAssembly App                        blazorwasm          [C#]        Web/Blazor/WebAssembly/PWA      \nBlazor WebAssembly App Empty                  blazorwasm-empty    [C#]        Web/Blazor/WebAssembly/PWA/Empty\nClass Library                                 classlib            [C#],F#,VB  Common/Library                  \nConsole App                                   console             [C#],F#,VB  Common/Console                  \ndotnet gitignore file                         gitignore                       Config                          \nDotnet local tool manifest file               tool-manifest                   Config                          \nEditorConfig file                             editorconfig                    Config                          \nglobal.json file                              globaljson                      Config                          \nMSTest Test Project                           mstest              [C#],F#,VB  Test/MSTest                     \nMVC ViewImports                               viewimports         [C#]        Web/ASP.NET                     \nMVC ViewStart                                 viewstart           [C#]        Web/ASP.NET                     \nNuGet Config                                  nugetconfig                     Config                          \nNUnit 3 Test Item                             nunit-test          [C#],F#,VB  Test/NUnit                      \nNUnit 3 Test Project                          nunit               [C#],F#,VB  Test/NUnit                      \nProtocol Buffer File                          proto                           Web/gRPC                        \nRazor Class Library                           razorclasslib       [C#]        Web/Razor/Library               \nRazor Component                               razorcomponent      [C#]        Web/ASP.NET                     \nRazor Page                                    page                [C#]        Web/ASP.NET                     \nSolution File                                 sln,solution                    Solution                        \nWeb Config                                    webconfig                       Config                          \nWorker Service                                worker              [C#],F#     Common/Worker/Web               \nxUnit Test Project                            xunit               [C#],F#,VB  Test/xUnit                      </code></pre> <p>Some common <code>&lt;template&gt;</code> values are:</p> <ul> <li><code>console</code>: Console application</li> <li><code>classlib</code>: Class library</li> <li><code>gitignore</code>: Standard <code>.gitignore</code> file</li> <li><code>web</code>: Empty web project</li> <li><code>mvc</code>: ASP.NET Core MVC Web App</li> <li><code>webapp</code>: ASP.NET Core Web App that uses Razor Pages</li> <li><code>webapi</code>: ASP.NET Core Web API App</li> </ul> <p>Warning</p> <p>Razor Pages are an evolution of WebForms, and therefore comes with many of the same disadvantages.</p>","tags":["development","dotnet","cheat sheet"]},{"location":"development/dotnet/dotnet-cli-cheat-sheet/#adding-a-project-to-a-solution","title":"Adding a Project to a Solution","text":"<pre><code># add a project to the solution in the current directory\ndotnet sln add &lt;path to csproj file&gt;\n</code></pre> <p>Example</p> <p>If you are currently in the <code>/home/robert/Projects/MyProject</code> directory which contains <code>MyProject.sln</code>, the command <code>dotnet sln add ./MyProject.Exec/MyProject.Exec.csproj</code> will add that project to the solution.</p>","tags":["development","dotnet","cheat sheet"]},{"location":"development/dotnet/dotnet-cli-cheat-sheet/#cleaning-a-solution","title":"Cleaning a Solution","text":"<pre><code># run from solution directory to clean entire solution\n# run from project directory to only clean that specific project\ndotnet clean\n</code></pre>","tags":["development","dotnet","cheat sheet"]},{"location":"development/dotnet/dotnet-cli-cheat-sheet/#building-a-solution","title":"Building a Solution","text":"<pre><code># run from solution directory to build entire solution\n# run from project directory to only build that specific project\ndotnet build\n</code></pre>","tags":["development","dotnet","cheat sheet"]},{"location":"development/dotnet/dotnet-cli-cheat-sheet/#restore-nuget-packages","title":"Restore Nuget Packages","text":"<pre><code># run from solution directory to restore nuget packages for all projects in the solution\n# run from project directory to only restore nuget packages for that specific project\ndotnet restore\n</code></pre> <p>Note</p> <p>This isn't typically required anymore as <code>dotnet build</code> and <code>dotnet run</code> will automatically restore nuget packages when required.</p>","tags":["development","dotnet","cheat sheet"]},{"location":"development/dotnet/dotnet-cli-cheat-sheet/#add-a-nuget-package-to-project","title":"Add a Nuget Package to Project","text":"<pre><code># run from project directory to add nuget package reference to that specific project\ndotnet add package &lt;package name&gt;\n</code></pre> <p>Example</p> <pre><code># add the latest version of a package:\ndotnet add package Newtonsoft.Json\n\n#add a specific version of a package to a project:\ndotnet add package Microsoft.Azure.DocumentDB.Core -v 1.0.0\n</code></pre>","tags":["development","dotnet","cheat sheet"]},{"location":"development/dotnet/dotnet-cli-cheat-sheet/#list-nuget-packages-in-a-project","title":"List Nuget Packages in a Project","text":"<pre><code># run from solution directory to list nuget packages for all projects in the solution\n# run from project directory to list nuget packages for that specific project\ndotnet list package\n</code></pre>","tags":["development","dotnet","cheat sheet"]},{"location":"development/dotnet/dotnet-cli-cheat-sheet/#list-outdated-packages","title":"List Outdated Packages","text":"<pre><code># run from solution directory to list outdated nuget packages for all projects in the solution\n# run from project directory to list outdated nuget packages for that specific project\ndotnet list package --outdated\n</code></pre>","tags":["development","dotnet","cheat sheet"]},{"location":"development/dotnet/dotnet-cli-cheat-sheet/#remove-a-nuget-package-from-a-project","title":"Remove a Nuget Package from a Project","text":"<pre><code># run from project directory to remove a nuget package reference from that specific project\ndotnet add package &lt;package name&gt;\n</code></pre> <p>Example</p> <pre><code># remove a package from a project:\ndotnet remove package Newtonsoft.Json\n</code></pre>","tags":["development","dotnet","cheat sheet"]},{"location":"development/dotnet/dotnet-cli-cheat-sheet/#add-reference-to-another-project","title":"Add Reference to Another Project","text":"<pre><code># add reference to another project to a specific project\ndotnet add reference &lt;path to .csproj&gt;\n</code></pre>","tags":["development","dotnet","cheat sheet"]},{"location":"development/dotnet/dotnet-cli-cheat-sheet/#list-references","title":"List References","text":"<pre><code># list all references for a specific project\ndotnet list reference\n</code></pre>","tags":["development","dotnet","cheat sheet"]},{"location":"development/dotnet/dotnet-cli-cheat-sheet/#remove-a-reference-to-another-project","title":"Remove a Reference to Another Project","text":"<pre><code># remove a reference to another project from a specific project\ndotnet remove &lt;path to .csproj&gt;\n</code></pre>","tags":["development","dotnet","cheat sheet"]},{"location":"development/dotnet/dotnet-cli-cheat-sheet/#run-a-project","title":"Run a Project","text":"<pre><code># run from project directory to start an application (console app, web app, etc.)\ndotnet run\n</code></pre> <p>Passing in Arguments</p> <p>If you need to pass in arguments when running the application using <code>dotet run</code>, you'll need to use the following syntax:</p> <pre><code># dotnet run &lt;any dotnet CLI args&gt; -- &lt;application args&gt;\n# e.g. 'val1' and 'val2' are args[0] and args[1] passed into console application's\n# private static int Main(string[] args)\ndotnet run -- val1 val2\n</code></pre>","tags":["development","dotnet","cheat sheet"]},{"location":"development/dotnet/dotnet-cli-cheat-sheet/#publish-a-project","title":"Publish a Project","text":"<p>There are two main types of application publishing in:</p> <ol> <li>Self-contained deployments (SCD)</li> <li>Framework-dependent executables (FDE)</li> </ol> <p>Note</p> <p>FDEs are now the default in .NET Core 3.0 and up.</p>","tags":["development","dotnet","cheat sheet"]},{"location":"development/dotnet/dotnet-cli-cheat-sheet/#rids-runtime-identifier","title":"RIDS (Runtime Identifier)","text":"<p>When publishing your application you have the option of targeting a particular runtime environment (OS, CPU architecture, etc.).</p> <p>Tip</p> <p>If you do not specify an RID, .NET will attempt to using one matching the host machine you are publishing from.</p> <p>Below are same common values:</p>","tags":["development","dotnet","cheat sheet"]},{"location":"development/dotnet/dotnet-cli-cheat-sheet/#windows-rids","title":"Windows RIDs","text":"<p>Only common values are listed. For the latest and complete version, see the runtime.json file in the dotnet/runtime repository.</p> Windows, not version-specific <ul> <li><code>win-x64</code></li> <li><code>win-x86</code></li> <li><code>win-arm</code></li> <li><code>win-arm64</code></li> </ul> Windows 7 / Windows Server 2008 R2 <ul> <li><code>win7-x64</code></li> <li><code>win7-x86</code></li> </ul> Windows 8.1 / Windows Server 2012 R2 <ul> <li><code>win81-x64</code></li> <li><code>win81-x86</code></li> <li><code>win81-arm</code></li> </ul> Windows 11 / Windows Server 2022 / Windows 10 / Windows Server 2016 <ul> <li><code>win10-x64</code></li> <li><code>win10-x86</code></li> <li><code>win10-arm</code></li> <li><code>win10-arm64</code></li> </ul> <p>Note</p> <p>There are no win11 RIDs, use win10 RIDs for Windows 11.</p>","tags":["development","dotnet","cheat sheet"]},{"location":"development/dotnet/dotnet-cli-cheat-sheet/#linux-rids","title":"Linux RIDs","text":"<p>Only common values are listed. For the latest and complete version, see the runtime.json file in the dotnet/runtime repository. Devices running a distribution not listed below may work with one of the not-distribution-specific RIDs. For example, Raspberry Pi devices running a Linux distribution not listed can be targeted with linux-arm.</p> Linux, not distribution-specific <p><code>linux-x64</code> (Most desktop distributions like CentOS, Debian, Fedora, Ubuntu, and derivatives)</p> <p><code>linux-musl-x64</code> (Lightweight distributions using musl like Alpine Linux)</p> <p><code>linux-arm</code> (Linux distributions running on Arm like Raspbian on Raspberry Pi Model 2+)</p> <p><code>linux-arm64</code> (Linux distributions running on 64-bit Arm like Ubuntu Server 64-bit on Raspberry Pi Model 3+)</p>","tags":["development","dotnet","cheat sheet"]},{"location":"development/dotnet/dotnet-cli-cheat-sheet/#self-contained-deployments-scd","title":"Self-contained deployments (SCD)","text":"<p>These types of deployments package up everything, including the runtime.</p> <p>Advantages:</p> <ul> <li>No need to have the .net core runtime installed on the host OS</li> </ul> <p>Disadvantages:</p> <ul> <li>Larger deployment package size</li> <li>Does not take advantage of patched .NET core runtimes, as runtime is included directly in deployment packages</li> </ul> <pre><code># publish and created an SCD\ndotnet publish &lt;path to csproj&gt; -c &lt;publish config&gt; -r &lt;RID&gt; --self-contained true -o &lt;path to output dir&gt;\n</code></pre> <p>Creating a SDE executable that is meant to run on linux-x64 hosts</p> <pre><code>dotnet publish ./MyProject.Run/MyProject.Run.csproj -c Release -r linux-x64 --self-contained true -o ./output\n</code></pre>","tags":["development","dotnet","cheat sheet"]},{"location":"development/dotnet/dotnet-cli-cheat-sheet/#framework-dependent-executables-fde","title":"Framework-dependent executables (FDE)","text":"<p>These types of deployments rely on the .NET core runtime being preinstalled on the host OS.</p> <p>Advantages:</p> <ul> <li>Smaller deployment package size</li> <li>Uses the latest patched version of the .net core runtime installed on the host OS</li> </ul> <p>Disadvantages:</p> <ul> <li>The major version of the .NET core runtime that the application targets must be installed (e.g. 6.x, 7.x)</li> </ul> <pre><code># publish and created an FDE\ndotnet publish &lt;path to csproj&gt; -c &lt;publish config&gt; -r &lt;RID&gt; -o &lt;path to output dir&gt;\n</code></pre> <p>Creating a FDE that using the same RID as the publishing host</p> <pre><code>dotnet publish ./MyProject.Run/MyProject.Run.csproj -c Release -o ./output\n</code></pre>","tags":["development","dotnet","cheat sheet"]},{"location":"development/dotnet/dotnet-cli-cheat-sheet/#additional-tips-and-tricks","title":"Additional Tips and Tricks","text":"<p>Below are additional tips and tricks that I've found useful over the years.</p>","tags":["development","dotnet","cheat sheet"]},{"location":"development/dotnet/dotnet-cli-cheat-sheet/#purge-all-binaries","title":"Purge all Binaries","text":"<p>This purges out all binaries for a given solution, slimming down the overall size on disk.  This is great for archiving older .NET solutions.</p> PowerShell<pre><code># run from the solution directory\nGet-ChildItem -inc bin,obj -rec | Remove-Item -rec -force\n</code></pre> <p>See also:</p> <ul> <li>https://docs.microsoft.com/en-us/dotnet/core/tools</li> <li>https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet</li> <li>https://github.com/NuGet/Home/wiki/dotnet-list-package</li> <li>https://docs.microsoft.com/en-us/dotnet/core/deploying</li> <li>https://docs.microsoft.com/en-us/dotnet/core/deploying/deploy-with-cli</li> <li>https://docs.microsoft.com/en-us/dotnet/core/rid-catalog</li> </ul>","tags":["development","dotnet","cheat sheet"]},{"location":"development/dotnet/minimal-dotnet-console-app-with-ioc/","title":"Minimal .NET Console Application with IoC","text":"<p>Last updated: 2023-01-04</p> <pre><code>using System;\nusing System.IO;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.Configuration.EnvironmentVariables;\nusing Microsoft.Extensions.DependencyInjection;\n\nnamespace MyDomain\n{\npublic abstract class MyConsoleApp\n{\npublic static IConfigurationRoot CreateConfiguration(string basePath)\n{\nbasePath = !string.IsNullOrEmpty(basePath) ? basePath : Directory.GetCurrentDirectory();\n\nreturn new ConfigurationBuilder()\n.SetBasePath(basePath)\n.AddJsonFile(\"appsettings.json\", optional : true, reloadOnChange : true)\n.AddEnvironmentVariables()\n.Build();\n}\n\npublic static IServiceCollection ConfigureServices(IConfigurationRoot config)\n{\nvar serviceCollection = new ServiceCollection()\n.AddOptions();\n\n/* General Configuration\n                .Configure&lt;MyOptions&gt;(config);\n\n                // Section Configuration\n                .Configure&lt;MySectionOptions&gt;(config.GetSection(\"MySubSection\"));\n\n                // Transient Service\n                .AddTransient&lt;IMyService,MyService&gt;();\n\n                // Transient Service with parametered cstor\n                .AddTransient&lt;IMyService&gt;(s =&gt; new MyService(myParam));\n\n                // Singleton Service\n                .AddSingleton&lt;IMySingletonService, MySingletonService&gt;();\n                */\n\n/* If you need access to the configuration to affect the configured services\n\n            // General Configuration\n            var myOptions = new MyOptions();\n            config.Bind(myOptions);\n\n            // Section Configuration\n            var mySubOptions = new MySubOptions();\n            config.GetSection(\"MySubSection\").Bind(mySubOptions);\n\n            */\n\nreturn serviceCollection;\n}\n\npublic static (IConfigurationRoot, IServiceCollection) ConfigureConsoleApplication(string basePath)\n{\nvar config = CreateConfiguration(basePath);\nvar serviceCollection = ConfigureServices(config);\nreturn (config, serviceCollection);\n}\n\nstatic void Main(string[] args)\n{\nif(args == null || args.Length == 0)\nreturn;\n\nvar commandArg = args[0].ToLowerInvariant();\nvar pathArg = args.Length &lt;= 1 ? \".\" : args[1];\n\nif(!Directory.Exists(pathArg))\nreturn;\n\npathArg = Path.GetFullPath(pathArg);\n\nvar appConfiguration = ConfigureConsoleApplication(pathArg);\n\nvar config = appConfiguration.Item1;\nvar serviceProvider = appConfiguration.Item2.BuildServiceProvider();\n\n//var myService = serviceProvider.GetService&lt;IMyService&gt;();\n\nswitch(commandArg)\n{\ncase \"help\":\n//run help command\nreturn;\n\ncase \"anothercommand\":\n//run another command\nreturn;\n\ndefault:\nreturn;\n}\n}\n}\n}\n</code></pre>","tags":["development","dotnet","csharp","code example"]},{"location":"development/git/git-cheat-sheet/","title":"Git Cheat Sheet","text":"<p>Last updated: 2023-01-04</p>","tags":["development","git","cheat sheet"]},{"location":"development/git/git-cheat-sheet/#push-an-existing-repository-to-an-upstream-remote","title":"Push an Existing Repository to an Upstream Remote","text":"<pre><code># add an https upstream remote\ngit remote add origin https://github.com/rstrube/xxx.git\n\n# alternatively add an ssh upstream remote\ngit remote add origin git@github.com:rstrube/xxx.git\n\n# force move existing branch to main (e.g. rename branch)\ngit branch -M main\n\n# push a main branch and add upstream tracking reference\ngit push -u origin main\n\n# alternatively push all branches and add upstream tracking reference(s)\ngit push -u origin --all\n</code></pre>","tags":["development","git","cheat sheet"]},{"location":"development/git/git-cheat-sheet/#set-upstream-tracking-for-specific-branch","title":"Set Upstream Tracking for Specific Branch","text":"<pre><code># add upstream tracking reference for current branch\ngit branch -u origin/develop\n\n# add upstream tracking reference for specific branch\ngit branch -u origin/develop develop\n</code></pre>","tags":["development","git","cheat sheet"]},{"location":"development/git/git-cheat-sheet/#delete-all-local-branches-except-for-specific-branch","title":"Delete all Local Branches Except for Specific Branch","text":"<p>There are times when you would like to clean out most of your local branches, keeping a few specific branches:</p> <pre><code># delete all branches except \"main\"\ngit branch | grep -v \"main\" | xargs git branch -D\n\n# delete all branches except \"main\" and \"develop\"\ngit branch | grep -v \"main\" | grep -v \"develop\" | xargs git branch -D\n\n# delete all branches except for \"main\" and your current branch\ngit branch | grep -v \"main\" | grep -v ^* | xargs git branch -D\n</code></pre>","tags":["development","git","cheat sheet"]},{"location":"development/git/git-cheat-sheet/#completely-reset-local-repository-branch","title":"Completely Reset Local Repository Branch","text":"<p>There are times when you would like to completely reset your local repository branch so it matches an upstream remote exactly.</p> <pre><code># refreshes from default upstream remote\ngit fetch\n\n# optionally you can specify the upstream remote\ngit fetch origin\n\n# do a hard reset to the latest commit from upstream remote\ngit reset --hard origin/HEAD\n\n# clean out untracked files\n# -x don't use standard .gitignore rules\n# -d recurse into untracked directories\n# -f force\ngit clean -xdf\n</code></pre>","tags":["development","git","cheat sheet"]},{"location":"development/git/git-cheat-sheet/#gitignore-a-specific-file-that-was-previously-added-to-a-repository","title":"Gitignore a Specific File that was Previously Added to a Repository","text":"<p>If a file is already being tracked in a given repository, simply adding it to <code>.gitignore</code> won't remove it.</p> <p>There are two approaches:</p> Approach 1: Separate commits for the deletion of file, and <code>.gitignore</code>. <p>Warning</p> <p>This has the downside of requiring the deletion of a specific file (at least temporarily).  After you've pushed both commits, you'll need to manually restore a local copy of the deleted file.  It will be git ignored moving forward.   </p> <ul> <li> Commit a deletion of the file.</li> <li> Commit changes to <code>.gitignore</code> to explicitly ignore the file moving forward.</li> </ul> <p>All future changes to the file, including recreating it again will be ignore.</p> Approach 2: Separate commits for the deletion of the file from the index, and <code>.gitignore</code> <p>Tip</p> <p>This is the preferred method, as you don't need to explicitly delete the file.</p> <ul> <li> <p> Remove the file from the index, and commit. <pre><code># remove the file from the index only (--cached switch)\ngit rm --cached myfile\n</code></pre></p> </li> <li> <p> Commit changes to <code>.gitignore</code> to explicitly ignore the file moving forward.</p> </li> </ul> <p>All future changes to the file will be ignore.</p>","tags":["development","git","cheat sheet"]},{"location":"development/javascript/javascript-import-export-cheat-sheet/","title":"Javascript Import Export Cheat Sheet","text":"<p>Last updated: 2023-01-04</p> <p>There are two main approaches of exposing values, objects and functions from one JS file to another:</p> <ol> <li>Common JS</li> <li>ES6</li> </ol>","tags":["development","javascript","cheat sheet"]},{"location":"development/javascript/javascript-import-export-cheat-sheet/#common-js","title":"Common JS","text":"<p>Common JS is the syntax built into node.js to support importing and exporting logic.</p> <p>Exposing logic from a JS file</p> <p>Use <code>module.exports</code> to define what members to expose as an object:</p> <pre><code>//myModule.js\n//----------------\n'use strict';\nconst privFunc = (value) =&gt; {\nconsole.log('value: ', inputValue);\n};\n\nconst pubDefaultValue = 10;\n\nconst pubFunc = (value) =&gt; {\nprivFunc(value);\nreturn value + 1;\n};\n\n//expose the following members as an object:\n//1. pubDefaultValue\n//2. pubFunc\nmodule.exports = {\npubDefaultValue,\npubFunc\n};\n</code></pre> <p>Importing the exposed logic as an object</p> <pre><code>//importExample.js\n//----------------\n'use strict';\nconst myModule = require('./path/myModule'); //import full object\n\nconst run = () =&gt; {\n// reference each exposed member via the exposed object\nreturn myModule.publicFunc(myModule.pubDefaultValue);\n};\n</code></pre> <p>Importing specific members from the JS file using object deconstruction</p> <pre><code>//importExample2.js\n//----------------\n'use strict';\nconst { pubFunc } = require('./path/myModule'); //import specific members\n\nconst run2 = () =&gt; {\n//reference the exposed member directly\nreturn pubFunc(10);\n};\n</code></pre>","tags":["development","javascript","cheat sheet"]},{"location":"development/javascript/javascript-import-export-cheat-sheet/#es6","title":"ES6","text":"<p>ECMAScript 6 supports a more modern way of importing and exporting logic.</p> <p>Exposing logic from a JS file</p> <p>Use <code>export</code> keyword to define what members to expose:</p> <pre><code>//myModule.js\n//----------------\nconst privFunc = (value) =&gt; {\nconsole.log('value: ', inputValue);\n};\n\nexport const pubDefaultValue = 10;\n\nexport const pubFunc = (value) =&gt; {\nprivFunc(value);\nreturn value + 1;\n};\n</code></pre> <p>You can also <code>export</code> an <code>default</code> function or object.</p> <pre><code>//myModule.js\n//----------------\nconst privFunc = (value) =&gt; {\nconsole.log('value: ', inputValue);\n};\n\nexport const pubDefaultValue = 10;\n\nconst pubFunc = (value) =&gt; {\nprivFunc(value);\nreturn value + 1;\n};\n\n//export the exposedFunc by default\nexport default pubFunc;\n</code></pre> <p>Importing the default export from a JS file</p> <pre><code>//importExample.js\n//----------------\nimport myModule from './path/myModule'; //import default export\n\nconst run = () =&gt; {\nreturn myModule(10); // myModule == pubFunc\n};\n</code></pre> <p>Importing specific exports from a JS file using object deconstruction</p> <pre><code>//importExample2.js\n//----------------\nimport { pubFunc } from './path/myModule'; //specific exports\n\nconst run2 = () =&gt; {\nreturn pubFunc(10);\n};\n</code></pre> <p>Importing all exports from a JS file and put them behind a \"namespace\"</p> <pre><code>//importExample3.js\n//----------------\nimport * as myModule from './path/myModule'; //all named members behind namespace\n\nconst run3 = () =&gt; {\nreturn myModule.pubFunc(10);\n};\n</code></pre> <p>See also:</p> <ul> <li>https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export</li> <li>https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import</li> </ul>","tags":["development","javascript","cheat sheet"]},{"location":"development/javascript/lodash-cheat-sheet/","title":"Lodash Cheat Sheet","text":"<p>Last updated: 2023-01-04</p>","tags":["development","javascript","lodash","cheat sheet"]},{"location":"development/javascript/lodash-cheat-sheet/#get-set","title":"get / set","text":"<p>Get a property from an object</p> <pre><code>//get property value (no fallback)\nconst myProp = get(myObj, 'myProp');\n\n//get property value (with fallback)\nconst myProp2 = get(myObj, 'myProp2', 'Fallback value');\n\n/*\nnote: fallback will only be used if the property does not exist, or is undefined if property has a value of 'null' that will be returned.  If you wish to also fallback on 'null' use the following:\n*/\nconst myProp3 = get(myObj, 'myProp3') || 'Fallback value';\n</code></pre> <p>See also: https://lodash.com/docs/4.17.15#get</p> <p>Set a property on an object</p> <pre><code>let myObj = {};\n\n//set a property value\nset(myObj, 'myProp', 'Test value');\n</code></pre> <p>See also: https://lodash.com/docs/4.17.15#set</p>","tags":["development","javascript","lodash","cheat sheet"]},{"location":"development/javascript/lodash-cheat-sheet/#isempty","title":"isEmpty","text":"<p>Used to check if an object, array or string value is: <code>[]</code>, <code>{}</code>, <code>''</code>, <code>null</code>, or <code>undefined</code>.</p> <p>Danger</p> <p><code>isEmpty</code> can only be used for objects, arrays, or strings.</p> <p>Example</p> <pre><code>_.isEmpty([]);\n//\u00a0=&gt;\u00a0true\n\n_.isEmpty({});\n//\u00a0=&gt;\u00a0true\n\n_.isEmpty('');\n//\u00a0=&gt;\u00a0true\n\n_.isEmpty(null);\n//\u00a0=&gt;\u00a0true\n\n_.isEmpty(undefined);\n//\u00a0=&gt;\u00a0true\n\n_.isEmpty([1,\u00a02,\u00a03]);\n//\u00a0=&gt;\u00a0false\n\n_.isEmpty({\u00a0'a':\u00a01\u00a0});\n//\u00a0=&gt;\u00a0false\n\n_.isEmpty('Test value');\n//\u00a0=&gt;\u00a0false\n\n// Some results that might surprise you!\n// vvv\n\n_.isEmpty(true);\n//\u00a0=&gt;\u00a0true\n\n_.isEmpty(1);\n//\u00a0=&gt;\u00a0true\n</code></pre> <p>See also: https://lodash.com/docs/4.17.15#isEmpty</p>","tags":["development","javascript","lodash","cheat sheet"]},{"location":"development/javascript/lodash-cheat-sheet/#reduce","title":"reduce","text":"<p>Reduce is one of the most versatile functions in your lodash toolbelt.  At it's core it iterates over a data structure (typically an array or object) and then constructs a new data structure (again typically an array or object) by way of an accumulator.</p> <p>You define the starting accumulator value which gets fed into the first execution of the iteration function.  This first execution of the iteration function can manipulate and return the accumulator, which in turn get's passed in as a new accumulator value into the second execution of the iteration function.  This continues until the iteration function has executed across all items in the starting data structure.</p> <p>The function signature is:</p> <pre><code>_.reduce(dataToIterate, (accumulator, data, /*optional*/ propKeyOrIndex) =&gt; {}, startAccumulator);\n</code></pre> <p>Example</p> <p>Let's take a look at an example with the following:</p> <ul> <li>Starting data structure to iterate through is an array of integers.</li> <li>Iteration fuction will add next iterated integer to the accumulator and pass it forward</li> <li>The starting accumulator is = 0</li> </ul> <pre><code>_.reduce([1,0,0,3,8,1], (acc, data) =&gt; { return acc + data; }, 0);\n// =&gt; 15\n</code></pre> <p>Explanation: we start with a accumulator value of <code>0</code>.  We then iterate through the <code>[1,0,0,3,8,1]</code> array.  For each iteration we execute a function that accepts the current accumulor, adds the current value from the data structure, and returns the value of the new accumulator.  This new acculumator value get's passed into the next execution of the iteration fuction and so on until we've iterated through all items in the array.</p> <p>The sequence would be:</p> Iterated Data Accumulator New Accumulator 1 0 1 0 1 1 0 1 1 3 1 4 8 4 12 1 12 13 <p>The final value of the reduce function would = <code>13</code>.</p> <p>Example</p> <p>Let's take a look at another example, but this time we're going to specifically ignore any negative numbers.</p> <p>Note</p> <p>If don't want to perform any changes to the accumulator, just return it as is.</p> <pre><code>const dataToIterate = [-1,0,0,-3,8,1,-1,2,1,2,9,-2];\n\n_.reduce(dataToIterate, (acc, data) =&gt; { if(data &lt; 0) { return acc; }\n\nreturn acc + data; }, 0);\n// =&gt; 23 \n</code></pre> <p>The sequence would be:</p> Iterated Data Accumulator New Accumulator -1 0 0 0 0 0 0 0 0 -3 0 0 8 0 8 1 8 9 -1 9 9 2 9 11 1 11 12 2 12 14 9 14 23 -2 23 23 <p>The final value of the reduce function would = <code>23</code>.</p>","tags":["development","javascript","lodash","cheat sheet"]},{"location":"development/javascript/lodash-cheat-sheet/#using-reduce-with-objects","title":"Using Reduce with Objects","text":"<p>Reduce can also be used on objects.  When iterating through an object, reduce will call the iteration function for each of the object's properties.</p> <p>Example</p> <p>Let's take a look at an example with the following:</p> <ul> <li>Starting data structure to iterate through is an object</li> <li>Iteration fuction will go through each property value, and add it an array</li> <li>Starting accumulator is an empty array</li> </ul> <pre><code>const startingObj = {\nprop1: 'first',\nprop2: 2,\nprop3: 'third'\n};\n\n_.reduce(startingObj, (acc, propValue) =&gt; { acc.push(propValue); return acc;\n}, []);\n// =&gt; ['first', 2, 'third']\n</code></pre> <p>The sequence would be:</p> Iterated Data Accumulator New Accumulator 'first' [] ['first'] 2 ['first'] ['first', 2] 'third' ['first', 2, 'third'] ['first', 2 'third'] <p>The final value of the reduce function would = <code>['first', 2, 'third']</code>.</p> <p>Example</p> <p>Lets take a look an another example with the following:</p> <ul> <li>Starting data structure to iterate through is an object</li> <li>Iteration function will go through each property value, and if it's a string, add it as a property to the new accumulator object with the same property name</li> <li>Starting accumulator is an empty object</li> </ul> <p>Note</p> <p>Here we are using the optional third parameter in the iteration function, we are also using the <code>isString()</code> and <code>set()</code> lodash functions</p> <pre><code>const startingObj = {\nfirstName: 'Sam',\nlastName: 'Smith',\nage: 52\n};\n\n_.reduce(startingObj, (acc, propValue, propKey) =&gt; {\nif(!_.isString(propValue)) {\nreturn acc;\n}\n\n// equivalent to acc[propKey] = propValue;\n_.set(acc, propKey, propValue); return acc;\n, {});\n// =&gt; {\n//      firstName: 'Sam',\n//      lastName: 'Smith'\n//    }\n</code></pre> <p>The sequence would be:</p> Iterated Data Accumulator New Accumulator 'Sam' {} { firstName: 'Sam'} 'Smith' { firstName: 'Sam'} { firstName: 'Sam', lastName: 'Smith'} 52 { firstName: 'Sam', lastName: 'Smith'} { firstName: 'Sam', lastName: 'Smith'} <p>The final value of the reduce function would be =</p> <pre><code>{\nfirstName: 'Sam',\nlastName: 'Smith'\n}\n</code></pre> <p>Hopefully you can begin to see how versatile and powerful reduce can be in your day to day development.</p> <p>See also: https://lodash.com/docs/4.17.15#reduce</p>","tags":["development","javascript","lodash","cheat sheet"]},{"location":"development/mkdocs/starter-template-leveraging-material-for-mkdocs-foam/","title":"Starter Template Combining Foam + Material for MkDocs","text":"<p>Last updated: 2023-01-24</p> <p>External reference: https://github.com/rstrube/starter-template-foam-material-mkdocs</p>","tags":["development","foam","mkdocs","external"]},{"location":"development/optimizely/optimizely-b2c-cheat-sheet/","title":"Optimizely B2C Commerce Cheat Sheet","text":"<p>Last updated: 2023-01-09</p>","tags":["optimizely","cheat sheet"]},{"location":"development/optimizely/optimizely-b2c-cheat-sheet/#convert-tofrom-catalog-codes-and-content-links","title":"Convert to/from Catalog Codes and Content Links","text":"<p>The <code>ReferenceConverter</code> class (no interface) can be used convert between a catalog code and a <code>ContentLink</code> and vice-versa.</p> <p>Using ReferenceConverter to convert to/from catalog codes and content links</p> <pre><code>public class MyService\n{\npublic void MyTestMethod(string code)\n{\n// get content link from code\nvar contentLink = _referenceConverter.GetContentLink(code);\n\n// do something with the content link\nif(_contentLoader.TryGet&lt;VariationContent&gt;(contentLink, VariationContent variationContent))\n{\n// ...\n}\n}\n\npublic void MyTestMethod2(ContentLink contentLink)\n{\nif(ContentReference.IsNullOrEmpty(contentLink))\nreturn;\n\n// get code from content link\nvar code = _referenceConverter.GetCode(contentLink);\n\n// do something with the code\n// ...\n}\n\nprivate readonly IContentLoader _contentLoader;\nprivate readonly ReferenceConverter _referenceConverter;\n\n// inject services using ioc into class constructor\npublic MyService(IContentLoader contentLoader, ReferenceConverter referenceConverter)\n{\n_contentLoader = contentLoader;\n_referenceConverter = referenceConverter;\n}\n}\n</code></pre>","tags":["optimizely","cheat sheet"]},{"location":"development/optimizely/optimizely-cms-braindump/","title":"Optimizely CMS Braindump","text":"<p>Last updated: 2023-01-04</p>","tags":["optimizely"]},{"location":"development/optimizely/optimizely-cms-cheat-sheet/","title":"Optimizely CMS Cheat Sheet","text":"<p>Last updated: 2023-01-09</p>","tags":["optimizely","cheat sheet"]},{"location":"development/react/building-a-react-client-side-web-app-from-scratch/","title":"Building a React Client-Side Web Application from Scratch","text":"<p>Last updated: 2023-01-04</p> <p>External reference: https://github.com/rstrube/react-webpack-tutorial</p>","tags":["development","react","webpack","code example","external"]},{"location":"development/sql-server/sql-server-in-docker-container-on-linux/","title":"SQL Server in a Docker Container on Linux","text":"<p>Last updated: 2023-01-09</p>","tags":["development","sql server","docker","linux"]},{"location":"development/sql-server/sql-server-in-docker-container-on-linux/#installation-and-configuration","title":"Installation and Configuration","text":"<ul> <li> <p> Download latest Docker image for SQL Server 2022: <pre><code>docker pull mcr.microsoft.com/mssql/server:2022-latest\n</code></pre></p> </li> <li> <p> Start a new container instance from the downloaded Docker image: <pre><code>docker run -e \"ACCEPT_EULA=Y\" -e \"MSSQL_SA_PASSWORD=&lt;YourStrong@Passw0rd&gt;\" -p 1433:1433 --name sql1 --hostname sql1 -v sql1:/var/opt/mssql -d mcr.microsoft.com/mssql/server:2022-latest\n</code></pre></p> </li> </ul> <p>Note</p> <p>In addition to creating a new Docker instance, we are also creating a volume by using the <code>-v</code> switch. This will create a volume that maps container storage to your host storage.  In this case the volume is called <code>sql1</code>.</p> <p>You can name the image whatever you want, for this example we will use an image name of <code>sql1</code>.</p> <ul> <li> <p> Confirm that the new instance is running: <pre><code>docker ps -a\n</code></pre></p> </li> <li> <p> Confirm the location of the volume (this will tell you your path on your host machine): <pre><code>docker volume inspect sql1\n[\n{\n\"CreatedAt\": \"2022-12-19T16:17:37-07:00\",\n        \"Driver\": \"local\",\n        \"Labels\": null,\n        \"Mountpoint\": \"/var/lib/docker/volumes/sql1/_data\",\n        \"Name\": \"sql1\",\n        \"Options\": null,\n        \"Scope\": \"local\"\n}\n]\n</code></pre></p> </li> <li> <p> Copy MDF and LDF files to the container (this will indirectly copy the files to the volume on your host machine): <pre><code># copy the mdf and ldf files\ndocker cp ./myFiles/MyProject.mdf sql1:/var/opt/mssql/data/\ndocker cp ./myFiles/MyProject_log.ldf sql1:/var/opt/mssql/data/\n</code></pre></p> </li> <li> <p> Update the permissions of the MDF and LDF files within the container: <pre><code># update permissions for mdf and ldf files, sql server requires mssql:root permissions on the files\ndocker exec -it --user root sql1 chown mssql:root /var/opt/mssql/data/MyProject.mdf\ndocker exec -it --user root sql1 chown mssql:root /var/opt/mssql/data/MyProject_log.ldf\n</code></pre></p> </li> <li> <p> Create new databases using SQL</p> </li> </ul> <p>Tip</p> <p>To do this you'll need to connect to your database using Visual Studio Code (with SQL Server extension) or Azure Data Studio.  Once connected you should be able to run the SQL required to create new DBs inside the container.</p> <p>Note</p> <p>To login, use the following connection parameters:</p> <ul> <li>Server = <code>localhost</code></li> <li>Authentication type = <code>SQL Login</code></li> <li>User name = <code>SA</code></li> <li>Password = <code>&lt;password entered when creating Docker container&gt;</code></li> <li>Encryption = <code>False</code></li> </ul> <p>Note</p> <p>As long as you're mapping to the default port (<code>1433</code>), you should not have to provide it.</p> <p>Creating a new database using the MDF and LDF files copied into the container</p> <pre><code>CREATE DATABASE MyProject\nON\n(filename = N'/var/opt/mssql/data/MyProject.mdf')\nLOG ON\n(filename = N'/var/opt/mssql/data/WyProject_log.ldf')\nFOR ATTACH;\n</code></pre> <p>Creating a new database using only an MDF file (i.e. there is no accompanying ldf file)</p> <pre><code>CREATE DATABASE MyProject\nON\n(filename = N'/var/opt/mssql/data/MyProject.mdf')\nFOR ATTACH;\n</code></pre>","tags":["development","sql server","docker","linux"]},{"location":"development/sql-server/sql-server-in-docker-container-on-linux/#starting-a-shell-in-the-docker-container","title":"Starting a Shell in the Docker Container","text":"<p>If you would like to start a shell within the Docker container you can use the <code>docker exec</code> command:</p> <pre><code># start a shell in the docker image\nsudo docker exec -it sql1 bash\n\n# start a shell (as root) in the docker image\nsudo docker exec -it --user root sql1 bash\n</code></pre>","tags":["development","sql server","docker","linux"]},{"location":"development/vim/vim-cheat-sheet/","title":"Vim Cheat Sheet","text":"<p>Last updated: 2023-01-04</p>","tags":["development","vim","cheat sheet"]},{"location":"development/vim/vim-cheat-sheet/#normal-mode","title":"Normal Mode","text":"","tags":["development","vim","cheat sheet"]},{"location":"development/vim/vim-cheat-sheet/#cutting-text","title":"Cutting Text","text":"<p>There are various ways to delete text. All of these commands can be prefixed with a count value. <code>d</code> and <code>c</code> commands can accept any motion commands. Only arrow motion examples are shown in this section, many more variations will be discussed later in this chapter.</p> <ul> <li><code>dd</code> delete the current line</li> <li><code>2dd</code> delete the current line and the line below it (total 2 lines)</li> <li><code>10dd</code> delete the current line and 9 lines below it (total 10 lines)</li> <li><code>dk</code> delete the current line and the line above it</li> <li><code>3dk</code> delete the current line and 3 lines above it (total 4 lines)</li> <li><code>D</code> delete from the current character to the end of line (same as <code>d$</code>, where <code>$</code> is a motion command to move to the end of line)</li> <li><code>x</code> delete only the current character under the cursor (same as <code>dl</code>)</li> <li><code>cc</code> delete the current line and change to Insert mode<ul> <li>indentation will be preserved depending on the <code>autoindent</code> setting</li> </ul> </li> <li><code>4cc</code> delete the current line and 3 lines below it and change to Insert mode (total 4 lines)</li> <li><code>C</code> delete from the current character to the end of line and change to Insert mode</li> <li><code>s</code> delete only the character under the cursor and change to Insert mode (same as cl)</li> <li><code>5s</code> delete the character under the cursor and 4 characters to its right and change to Insert mode (total 5 characters)</li> <li><code>S</code> delete the current line and change to Insert mode (same as cc)<ul> <li>indentation will be preserved depending on the <code>autoindent</code> setting</li> </ul> </li> </ul>","tags":["development","vim","cheat sheet"]},{"location":"development/vim/vim-cheat-sheet/#copying-text","title":"Copying Text","text":"<p>There are various ways to copy text using the yank command <code>y</code>.</p> <ul> <li><code>yy</code> copy the current line<ul> <li><code>Y</code> also copies the current line</li> </ul> </li> <li><code>y$</code> copy from the current character to the end of line</li> <li><code>2yy</code> copy the current line and the line below it (total 2 lines)</li> <li><code>10yy</code> copy the current line and 9 lines below it (total 10 lines)</li> <li><code>yk</code> copy the current line and the line above it</li> <li><code>3yk</code> copy the current line and 3 lines above it (total 4 lines)</li> </ul>","tags":["development","vim","cheat sheet"]},{"location":"development/vim/vim-cheat-sheet/#pasting-text","title":"Pasting Text","text":"<p>The put (paste) command <code>p</code> is used after cut or copy operations.</p> <ul> <li><code>p</code> paste the copied content once<ul> <li>If the copied text was line based, content is pasted below the current line</li> <li>If the copied text was part of a line, content is pasted to the right of the cursor</li> </ul> </li> <li><code>P</code> paste the copied content once<ul> <li>If the copied text was line based, content is pasted above the current line</li> <li>If the copied text was part of a line, content is pasted to the left of the cursor</li> </ul> </li> <li><code>3p</code> and <code>3P</code> paste the copied content three times</li> <li><code>]p</code> paste the copied content like <code>p</code> command, but changes the indentation level to match the current line</li> <li><code>[p</code> paste the copied content like <code>P</code> command, but changes the indentation level to match the current line</li> </ul>","tags":["development","vim","cheat sheet"]},{"location":"foam/getting-started/","title":"Getting Started","text":"<p>Welcome to your new foam workspace, let's get you started.</p> <p>if you are already familiar with Foam and don't need help, just remove the <code>docs</code> folder for a clean repo.</p> <p>Let's go through this to set up your repo:</p> <ul> <li> <p> if you are new with VS Code, see how to get-started-with-vscode and how to use-keyboard-shortcuts-for-editing</p> </li> <li> <p> you can navigate the links between your notes by <code>cmd+click</code> (or <code>ctrl+click</code> on Windows) on a wikilink. You can go back with <code>ctrl+-</code>. Here, go to your [[inbox]]</p> </li> <li> <p> to see how your notes are connected, execute the <code>Foam: Show Graph</code> command. See graph-visualization.</p> </li> <li> <p> #tags can be used to further organize your content. Look at the <code>Tag Explorer</code> view on the left panel to find and navigate the tags in your knowledge base. See tags-and-tag-explorer.</p> </li> <li> <p> Foam supports spell-checking via VS Code.</p> </li> <li> <p> You can also paste images in your Foam, just press <code>cmd+alt+v</code> to create the image file and link to it from your note. See paste-images-from-clipboard.</p> </li> <li> <p> You can use Foam for your daily notes, or journaling. Execute now the <code>Foam: Open Daily Note</code> command to create a new file in your <code>journal</code> folder. See daily-notes.</p> </li> <li> <p> Want to see how to manage your tasks? Go to the [[todo]] note</p> </li> <li> <p> The section at the end of this file contains wikilink definitions, which enable navigation of your notes from GitHub's web UI, and in general to make <code>[wikilinks](features/wikilinks.md)</code> understood by any Markdown parser. See link-reference-definitions.</p> </li> <li> <p> To explore all the Foam settings, press <code>cmd+,</code>, then <code>Extensions &gt; Foam</code></p> </li> <li> <p> Living within VS Code, Foam can be customized in many ways! Look at the Foam Recipes for ideas!</p> </li> <li> <p> Join the Foam community on Discord, introduce yourself and leave a message on how you found Foam and how the onboarding went :) We are always keen to do better</p> </li> <li> <p> Take the Foam Welcome survey! It helps us better understand your need and how we can make Foam better and better for you :)</p> </li> </ul>"},{"location":"foam/getting-started/#advanced-features","title":"Advanced Features","text":"<ul> <li> You can create note-templates for things like book reviews, people, daily notes (coming soon), and more!</li> </ul>"},{"location":"foam/getting-started/#about-foam","title":"About Foam","text":"<p>Foam doesn't do all this magic on its own, it relies on some amazing extensions. Look at their documentation if you want to fully unlock the possibilities!</p> <p>Here they are:</p> <ul> <li>Markdown All In One</li> <li>vscode-paste-image</li> </ul> <p>A special mention goes to Markdown Links and Markdown Notes which have now been replaced by our own implementation but were foundational to Foam's beginnings.</p>"},{"location":"foam/features/daily-notes/","title":"Daily Notes","text":"<p>Daily notes allow you to quickly create and access notes for today.</p> <p>Try it out, run the <code>Foam: Open Daily Note</code> command.</p>"},{"location":"foam/features/daily-notes/#shortcuts-and-snippets","title":"Shortcuts and Snippets","text":"<p>You can quickly open today's daily note by pressing <code>alt+d</code>. You can also automatically open today's note via the <code>Foam \u203a Open Daily Note: On Startup</code> setting.</p> <p>You can also quickly create link to your daily notes, in the configured format, using snippets.</p> <p>Type <code>/today</code> and press <code>enter</code> to link to today's note. You can also write:</p> Snippet Date <code>/tomorrow</code> tomorrow <code>/yesterday</code> yesterday <code>/monday</code> next Monday <code>/+1d</code> tomorrow <code>/-3d</code> 3 days ago <code>/+1w</code> in a week <code>/-1m</code> one month ago <code>/+1y</code> in one year <p>You get the idea ;)</p>"},{"location":"foam/features/daily-notes/#configuration","title":"Configuration","text":"<p>It's possible to customize path and heading of your daily notes, by following the dateformat masking syntax. The following properties can be used:</p> <pre><code>  \"foam.openDailyNote.directory\": \"journal\",\n\"foam.openDailyNote.filenameFormat\": \"'daily-note'-yyyy-mm-dd\",\n\"foam.openDailyNote.fileExtension\": \"mdx\",\n\"foam.openDailyNote.titleFormat\": \"'Journal Entry, ' dddd, mmmm d\",\n</code></pre> <p>The above configuration would create a file <code>journal/daily-note-2020-07-25.mdx</code>, with the heading <code>Journal Entry, Sunday, July 25</code>.</p>"},{"location":"foam/features/graph-visualization/","title":"Graph Visualization","text":"<p>Foam comes with a graph visualization of your notes. To see the graph execute the <code>Foam: Show Graph</code> command.</p>"},{"location":"foam/features/graph-visualization/#graph-navigation","title":"Graph Navigation","text":"<p>With the graph you can:</p> <ul> <li>highlight a node by hovering on it, to quickly see how it's connected to the rest of your notes</li> <li>select one or more (by keeping <code>shift</code> pressed while selecting) nodes by clicking on them, to better understand the structure of your notes</li> <li>navigate to a note by clicking on it while pressing <code>ctrl</code> or <code>cmd</code></li> <li>automatically center the graph on the currently edited note, to immediately see its connections</li> </ul>"},{"location":"foam/features/graph-visualization/#custom-graph-styles","title":"Custom Graph Styles","text":"<p>By default, the Foam graph will use the VS Code theme, but it's possible to customize it with the <code>foam.graph.style</code> setting.</p> <p>A sample configuration object is provided below, you can provide as many or as little configuration as you wish:</p> <pre><code>\"foam.graph.style\": {\n\"background\": \"#202020\",\n\"fontSize\": 12,\n\"highlightedForeground\": \"#f9c74f\",\n\"node\": {\n\"note\": \"#277da1\",\n\"placeholder\": \"#545454\",\n\"feature\": \"green\",\n}\n}\n</code></pre> <ul> <li><code>note</code> defines the color for regular nodes</li> <li><code>placeholder</code> defines the color for links that don't match any existing note. This is a [[placeholder]] because no file with such name exists (see wikilinks for more info).</li> <li><code>feature</code> shows an example of how you can use note types to customize the graph. It defines the color for the notes of type <code>feature</code></li> <li>see note-properties for details</li> <li>you can have as many types as you want</li> </ul>"},{"location":"foam/features/link-reference-definitions/","title":"Link Reference Definitions","text":"<p>When you use <code>[wikilinks](./wikilinks.md)</code>, the foam-vscode extension can generate Markdown Link Reference Definitions at the bottom of the file.</p> <p>This is done to make the content of the file compatible with various Markdown tools (e.g. parsers, static site generators, VS code plugins etc), which don't support <code>[wikilinks](./wikilinks.md)</code> directly.</p> <p>This feature can be disabled by default (as it's done in the foam-template) because you don't need it to navigate your workspace, it is useful for publishing and compatibility of your notes.</p>"},{"location":"foam/features/link-reference-definitions/#example","title":"Example","text":"<p>The following example:</p> <pre><code>- [graph-visualization](./graph-visualization.md)\n</code></pre> <p>...generates the following link reference definitions to the bottom of the file:</p> <pre><code>[graph-visualization]: graph-visualization \"Graph Visualization\"\n</code></pre>"},{"location":"foam/features/link-reference-definitions/#configuration","title":"Configuration","text":"<p>You can use the <code>foam.edit.linkReferenceDefinitions</code> to configure the definitions (see get-started-with-vscode):</p> <ul> <li><code>withoutExtensions</code> (default): this works better with certain web publishing tools (e.g. GitHub pages)</li> <li><code>withExtensions</code>: this works better with standard markdown-based tools (e.g GitHub web UI)</li> <li><code>off</code>: this disables the generation of definitions</li> </ul> <p>After changing the setting in your workspace, you can run the <code>Foam: Run Janitor (Experimental)</code> command to convert all existing definitions.</p>"},{"location":"foam/features/note-properties/","title":"Note Properties","text":"<p>At the top of the file you can have a section where you define your properties.</p> <p>Be aware that this section needs to be at the very top of the file to be valid</p> <p>For example, for this file, we have:</p> <pre><code>---\ntype: feature\nkeywords: hello world\n---\n</code></pre> <p>Those are properties. Properties can be used to organize your notes.</p>"},{"location":"foam/features/note-properties/#special-properties","title":"Special Properties","text":"<p>Some properties have special meaning for Foam:</p> <ul> <li>the <code>title</code> property will assign the name to the note that you will see in the graph, regardless of the filename or the first heading (also see how to write-notes-in-foam)</li> <li>the <code>type</code> property can be used to style notes differently in the graph (also see graph-visualization)</li> <li>the <code>tags</code> property can be used to add tags to a note (see tags-and-tag-explorer)</li> </ul>"},{"location":"foam/features/note-templates/","title":"Note Templates","text":"<p>You can create notes from templates by running the <code>Foam: Create New Note from Template</code> command and follow the instructions.</p> <p>To create a template, just add regular <code>.md</code> files in <code>.foam/templates</code> (create the directory if necessary).</p> <p>Templates can use all the variables available in VS Code Snippets.</p>"},{"location":"foam/features/spell-checking/","title":"Spell Checking","text":"<p>There are many spell checking extensions for VS Code.</p> <p>The most popular spell checker for VS Code is Code Spell Checker.</p> <p>Another one of our favorites is LTeX, which is a bit heavier but offers some extra functionality.</p> <p>Another popular one is Spellright, but be mindful that there have been reports of incompatibility with the <code>vscode-markdown</code> extension (see https://github.com/foambubble/foam/issues/1068).</p>"},{"location":"foam/features/tags-and-tag-explorer/","title":"Tags and Tag Explorer","text":""},{"location":"foam/features/tags-and-tag-explorer/#tags","title":"Tags","text":"<p>You can add tags to your notes to categorize them, or in any way you want.</p> <p>There are two ways to add tags:</p> <ul> <li>you can add #tags just by writing them in the note</li> <li>another way is through note-properties, as you can see at the top of this file</li> </ul>"},{"location":"foam/features/tags-and-tag-explorer/#tag-explorer","title":"Tag Explorer","text":"<p>In the sidebar to the left, you will see a panel called <code>Tag Explorer</code>.</p> <p>You can use this panel to see the tags in your notes, and navigate them.</p> <p>Notice <code>my-tag1</code> and <code>my-tag2</code>, which were added via note-properties.</p>"},{"location":"foam/features/wikilinks/","title":"Wikilinks","text":"<p>Wikilinks are the internal links that connect the files in your knowledge base.</p> <p>To create a wikilink use <code>[[</code> and type the name of another file in your repo, for example [[graph-visualization]]</p> <p>You can also create a [[placeholder]]. A placeholder is a wikilink that doesn't have a target file and a link to a placeholder is styled differently so you can easily tell them apart. They can still be helpful to highlight connections.</p> <p>Open the graph with <code>Foam: Show Graph</code> command, and look at the placeholder node.</p> <p>Remember, with <code>CTRL/CMD+click</code> on a wikilink you can navigate to the note, or create it (if the link is a placeholder).</p>"},{"location":"foam/how-to/get-started-with-vscode/","title":"Getting started with VS Code","text":"<p>VS Code is a powerful text editor, hidden behind a simple interface.</p> <p>VS Code supports various keyboard shortcuts, the most important for us are:</p> Shortcut Action <code>cmd+N</code> create a new file <code>cmd+S</code> save the current file <code>cmd+O</code> open a file <code>cmd+P</code> use quickpick to open a file <code>cmd+shift+P</code> invoke a command (see below) <p>For more information, see the VS Code keyboard cheat sheets, where you can also see how to customize your keybindings.</p>"},{"location":"foam/how-to/get-started-with-vscode/#commands","title":"Commands","text":"<p>Commands make VS Code extremely powerful.</p> <p>To invoke a command, press <code>cmd+shift+P</code> and select the command you want to execute. For example, to see the Foam graph:</p> <ul> <li>press <code>cmd+shift+P</code></li> <li>start typing <code>show graph</code></li> <li>select the <code>Foam: Show Graph</code> command</li> </ul> <p>And watch the magic unfold.</p> <p>For more information on commands, see commands on the VS Code site.</p> <p>If you want to learn more about VS Code, check out their website.</p>"},{"location":"foam/how-to/get-started-with-vscode/#panels","title":"Panels","text":"<p>You can see a few panels on the left, including:</p> <ul> <li><code>Outline</code>: this panel shows you the structure of the file based on the headings</li> <li><code>Tag Explorer</code>: This shows you the tags in your workspace, see tags-and-tag-explorer for more information on tags</li> </ul>"},{"location":"foam/how-to/get-started-with-vscode/#settings","title":"Settings","text":"<p>To view or change the settings in VS Code, press <code>cmd+,</code></p>"},{"location":"foam/how-to/paste-images-from-clipboard/","title":"Paste Images from Clipboard","text":"<p>You can paste an image from the clipboard with <code>cmd+alt+v</code>.</p> <p>Images are automatically copied to the <code>/attachments</code> folder and a reference is added in the file where you pasted them.</p> <p>A prompt will ask you to confirm the name of the image, to disable it set <code>\"pasteImage.showFilePathConfirmInputBox\": false,</code> in the settings.</p> <p>To change the location where the image is created, change the <code>pasteImage.path</code> property, e.g.:</p> <ul> <li><code>${currentFileDir}</code>: save the image next to the file</li> <li><code>${currentFileDir}/images</code>: create an <code>images</code> directory next to the file and save the image there</li> </ul> <p>For more info check the vscode-paste-image extension page.</p>"},{"location":"foam/how-to/shortcut-list/","title":"Shortcut-List","text":"<p>You can use either the name or the id to find each shortcut in the settings (File &gt; Preferences &gt; Keyboard Shortcuts) and find out what it is bound to on your system and change it according to your liking.</p> Shortcut Name ID Extension Use <code>alt+c</code> - markdown.extension.checkTaskList Markdown All in One Toggle TODO items. <code>cmd+b</code> - markdown.extension.editing.toggleBold Markdown All in One Make selection bold. <code>cmd+i</code> - markdown.extension.editing.toggleItalic Markdown All in One Make selection italic. <code>ctrl+shift+f</code> Format Document editor.action.formatDocument Base Format tables <code>cmd+shift+f</code> Find files workbench.action.findInFiles Base Search in workspace. <code>cmd+shift+e</code> Show Explorer workbench.view.explorer Base Show the file explorer. <code>cmd+alt+v</code> Paste Image extension.pasteImage Paste Image Paste an image from your clipboard."},{"location":"foam/how-to/use-keyboard-shortcuts-for-editing/","title":"Use Keyboard Shortcuts for Editing","text":"<p>Here are some keyboard shortcuts you'll love when editing your notes.</p> <p>If you are not on mac or are using non-default shortcuts you can check the shortcut-list for each shortcut used in this note!</p> <p>This works best if you can see the result in the preview panel, run the <code>Markdown: Open Preview to the Side</code> command.</p> <ul> <li> <code>alt+c</code> changes state to a TODO item. Try it while the cursor is on this line.</li> </ul> <ul> <li> <code>cmd+b</code> makes the selection bold. Select me and make me bold.</li> </ul> <ul> <li> <code>cmd+i</code> makes the selection italic. Select me and make me italic.</li> </ul> <ul> <li> <code>alt+shift+f</code> formats a table. Place the cursor in the table below and format the table.</li> </ul> column 1 column 2 one element another element second row last cell <ul> <li> Paste link on selected text</li> <li>copy the following text: https://google.com</li> <li>select me and paste</li> </ul> <ul> <li> Search in your repo with <code>cmd+shift+f</code>: type \"search\"</li> <li>(go back to the file explorer with <code>cmd+shift+e</code>)</li> </ul> <ul> <li> Paste an image</li> <li>copy an image</li> <li>move your cursor to the next line, then press <code>cmd+alt+v</code> and confirm the name of the file</li> <li>.</li> <li>the image file has been created in <code>/attachments</code> and a reference to it has been added here</li> </ul>"},{"location":"foam/how-to/write-notes-in-foam/","title":"Writing Notes","text":"<p>Notes are simple text files with some extra flavor, in the shape of Markdown syntax and support for extra properties (see note-properties).</p>"},{"location":"foam/how-to/write-notes-in-foam/#foam-syntax","title":"Foam Syntax","text":"<p>Foam uses standard Markdown, with a few added twists:</p> <ul> <li>the title of a note (e.g. in the graph-visualization) is given by precedence based on:</li> <li>the <code>title</code> property (see note-properties)</li> <li>the first <code># heading 1</code> of the file</li> <li>the file name</li> </ul>"},{"location":"foam/how-to/write-notes-in-foam/#markdown-syntax","title":"Markdown Syntax","text":"<p>With Markdown, we can style our notes in a simple way, while keeping the document a simple text file (the best way to future-proof your writings!).</p> <p>You can see the formatted output by running the <code>Markdown: Open Preview to the Side</code> command.</p> <p>Here is a high level overview of Markdown, for more information on the Markdown syntax see here.</p>"},{"location":"foam/how-to/write-notes-in-foam/#heading-1","title":"Heading 1","text":""},{"location":"foam/how-to/write-notes-in-foam/#heading-2","title":"Heading 2","text":""},{"location":"foam/how-to/write-notes-in-foam/#heading-3","title":"Heading 3","text":""},{"location":"foam/how-to/write-notes-in-foam/#heading-4","title":"Heading 4","text":""},{"location":"foam/how-to/write-notes-in-foam/#heading-5","title":"Heading 5","text":""},{"location":"foam/how-to/write-notes-in-foam/#heading-6","title":"Heading 6","text":"<p>This is a link to google.</p> <p>This is a wikilink (aka internal link) to note-properties.</p> <p>Here is an image: </p> <p>this is a blockquote it can span multiple lines</p> <ul> <li>list item</li> <li>list item</li> <li> <p>list item</p> </li> <li> <p>One</p> </li> <li>Two</li> <li>Three</li> </ul> <p>This text is in bold and this is italic.</p> <p>The following is a horizontal rule</p> <p>This is a table:</p> Column 1 Column 2 R1C1 R1C2 R2C1 R2C2 <p>You can <code>inline code</code> or</p> <pre><code>you can create\ncode blocks\n</code></pre>"},{"location":"hardware/sbcs/cubox/setting-up-arch-linux-arm-on-cubox-sbc/","title":"Setting up Arch Linux ARM on Cubox-i","text":"<p>Last updated: 2023-01-04</p>","tags":["hardware","sbc","linux","arch linux"]},{"location":"hardware/sbcs/cubox/setting-up-arch-linux-arm-on-cubox-sbc/#introduction","title":"Introduction","text":"<p>Unfortunately the Arch Linux ARM image available for the Cubox-i is extremely old.  It ships with kernel 3.14 which has some bugs that prevent systemd networking from functioning correctly.  This complicates the installation process substantially.  This guide will walk you through setting up an up-to-date Arch Linux ARM install for your Cubox-i.</p>","tags":["hardware","sbc","linux","arch linux"]},{"location":"hardware/sbcs/cubox/setting-up-arch-linux-arm-on-cubox-sbc/#micro-sd-card-setup","title":"Micro-SD Card Setup","text":"<ul> <li> Plugin the micro-SD card into your main computer.  It should be detected by your OS and assigned a device path (e.g. <code>/dev/sdb</code>).  Make sure to replace <code>/dev/sdX</code> with the appropriate device when following the subsequent steps.</li> </ul> <pre><code># unmount the sd card if it was auto-mounted\numount /dev/sdX1\n\n# zero out the first few MB of the sd card to remove any previous u-boot environment\ndd if=/dev/zero of=/dev/sdX bs=1M count=4\n\n# start fdisk to create a new partition on the sd card\n# Type n, and then press ENTER, accepting default values\n# Exit by typing w\nfdisk /dev/sdX\n\n# create ext4 filesystem\nmkfs.ext4 /dev/sdX1\n\n# mount the filesystem\nmkdir root-cubox\nmount /dev/sdX1 root-cubox\n\n# download and extract the root filesystem (as root, not via sudo)\nwget http://os.archlinuxarm.org/os/ArchLinuxARM-imx6-cubox-latest.tar.gz\nsu\ntar -xpf ArchLinuxARM-imx6-cubox-latest.tar.gz -C root-cubox\n\n# exit root shell\nexit\n\n# install u-boot bootloader\ndd if=root-cubox/boot/SPL of=/dev/sdX bs=1K seek=1\ndd if=root-cubox/boot/u-boot.img of=/dev/sdX bs=1K seek=69\n\n# unmount partition\nsync\numount root\n</code></pre>","tags":["hardware","sbc","linux","arch linux"]},{"location":"hardware/sbcs/cubox/setting-up-arch-linux-arm-on-cubox-sbc/#initial-boot","title":"Initial Boot","text":"<ul> <li> Plug the micro-SD card into the Cubox-i (pins facing upwards).</li> <li> Plug in the 5V 300A power adapter.</li> <li> The Cubox-i has a serial console that is accessible via the micro-USB connector on it's back.  Plug this in between the Cubox-i and your host system, and run <code>screen</code></li> </ul> <pre><code>screen /dev/ttyUSB0 115200\n\n# you should see something like\nArch Linux 3.14.79-3-ARCH (ttymxc0)\n\nalarm login:\n</code></pre> <p>Note</p> <p>If you need to disconnect, use <code>CTRL-A, :</code> then type <code>quit &lt;enter&gt;</code></p> <p>Note</p> <p>If you accidentally close the terminal, you will need to manually reattach to the screen session</p> <pre><code>screen -ls\nscreen -r {number from ls}\n</code></pre> <p>Note</p> <p>You can login with <code>alarm/alarm</code> or <code>root/root</code>.  Unfortunately <code>sudo</code> is not installed, so you'll need to work as <code>root</code> for the time being.</p>","tags":["hardware","sbc","linux","arch linux"]},{"location":"hardware/sbcs/cubox/setting-up-arch-linux-arm-on-cubox-sbc/#setup-networking","title":"Setup Networking","text":"<p>Unfortunately the kernel is so old, that automatic network setup via <code>systemd-networkd</code> doesn't work correctly.  You'll need temporarily assign a static IP address to get things going.</p> <ul> <li> Disable all systemd related network services</li> </ul> <pre><code>systemctl stop systemd-networkd\nsystemctl disable systemd-networkd\nsystemctl stop systemd-resolved\nsystemctl disable systemd-resolved\nsystemctl stop systemd-timesyncd\nsystemctl disable systemd-timesyncd\n</code></pre> <ul> <li> Reboot</li> </ul> <pre><code>reboot\n</code></pre> <ul> <li> Login as root</li> </ul> <p>Note</p> <p>To perform these next steps you'll need to know the subnet of your router, and which IPs are usable for manual IP addresses.  In my case, my router uses <code>192.168.86.xxx</code>.  The router itself is on <code>192.168.86.1</code> and will act as the default gateway and DNS server.  The router's DHCP IP addresses start at <code>192.168.86.20</code>, so I can use <code>192.168.86.2</code> through <code>192.168.86.19</code>  for a static IPs.</p> <ul> <li> Set your DNS server to your router's IP.  In my case this was <code>192.168.86.1</code>:</li> </ul> <pre><code>rm /etc/resolv.conf\necho \"nameserver 192.168.86.1\" &gt; /etc/resolv.conf\n</code></pre> <ul> <li> Plug in the Cubox-i into your router via an Ethernet cable and then bring up the interface.  I'm choosing to use <code>192.168.86.19</code>:</li> </ul> <pre><code>ip link set eth0 up\nip address add 192.168.86.19/24 broadcast + dev eth0\nip route add default via 192.168.86.1 dev eth0\n</code></pre> <ul> <li> Confirm the IP address and routes:</li> </ul> <pre><code>ip address show\nip route show\n</code></pre> <ul> <li> Make sure you have a connection to the internet:</li> </ul> <pre><code>ping www.google.com\n</code></pre> <ul> <li> Set your timezone and update the system time:</li> </ul> <pre><code>timedatectl list-timezones\ntimedatectl set-timezone America/Denver\ntimedatectl set-time \"2022-10-29 21:40:00\"\ntimedatectl\n</code></pre>","tags":["hardware","sbc","linux","arch linux"]},{"location":"hardware/sbcs/cubox/setting-up-arch-linux-arm-on-cubox-sbc/#setup-pacman","title":"Setup Pacman","text":"<p>This next step is a bit tricky, as you'll need to login separately via SSH to run a script that creates entropy.  Keep your main connection as <code>root</code> via <code>screen</code> active!</p> <ul> <li> Log in as <code>alarm</code> via ssh:</li> </ul> <pre><code>ssh alarm@192.168.86.19\n</code></pre> <ul> <li> Use nano to create an entropy generating script:</li> </ul> entrop.sh<pre><code>#!/bin/bash\nfor i in {1..100000}\ndo\necho \"Hello $i times\"\ndone\n</code></pre> <ul> <li> Set permissions on the script so you can run it:</li> </ul> <pre><code>chmod +x entropy.sh\n</code></pre> <ul> <li> In the main connection (via <code>screen</code>) run the following command to initialize the pacman keys:</li> </ul> <pre><code>pacman-key --init\n</code></pre> <ul> <li> <p> In the SSH connection, run the entropy script several times.  Eventually the <code>pacman-key --init</code> command should finish.  You can <code>exit</code> the SSH connection.</p> </li> <li> <p> Continue in the main connection (via <code>screen</code>) to populate the pacman keys and update all packages:</p> </li> </ul> <pre><code>pacman-key --populate archlinuxarm\npacman -Syu\n</code></pre> <ul> <li> You should now have everything updated (minus the kernel).  Now reboot</li> </ul>","tags":["hardware","sbc","linux","arch linux"]},{"location":"hardware/sbcs/cubox/setting-up-arch-linux-arm-on-cubox-sbc/#updating-to-modern-kernel-as-root","title":"Updating to Modern Kernel (as root)","text":"<p>The kernel that ships with the base image is <code>linux-imx6</code> which hasn't been updated in ages.  You'll want to upgrade to <code>linux-armv7</code>.</p> <ul> <li> Reconnect your networking:</li> </ul> <pre><code>ip link set eth0 up\nip address add 192.168.86.19/24 broadcast + dev eth0\nip route add default via 192.168.86.1 dev eth0\n</code></pre> <ul> <li> Update the kernel:</li> </ul> <pre><code>pacman -S linux-armv7\n</code></pre> <ul> <li> You'll be asked to replace the old kernel.  Reboot one final time.</li> </ul>","tags":["hardware","sbc","linux","arch linux"]},{"location":"hardware/sbcs/cubox/setting-up-arch-linux-arm-on-cubox-sbc/#setup-sudo-as-root","title":"Setup Sudo (as root)","text":"<ul> <li> Reconnect your networking:</li> </ul> <pre><code>ip link set eth0 up\nip address add 192.168.86.19/24 broadcast + dev eth0\nip route add default via 192.168.86.1 dev eth0\n</code></pre> <ul> <li> Install and configure <code>sudo</code> and add the alarm user to the <code>wheel</code> group:</li> </ul> <pre><code>pacman -S sudo\nusermod -aG wheel alarm\n</code></pre> <ul> <li> Edit the <code>/etc/sudoers</code> file using <code>visudo</code>:</li> </ul> <pre><code>visudo\n\n# uncomment the following line:\n# %wheel ALL=(ALL:ALL) ALL\n</code></pre> <ul> <li> Logout as <code>root</code>, and continue all the subsequent steps as <code>alarm</code></li> </ul>","tags":["hardware","sbc","linux","arch linux"]},{"location":"hardware/sbcs/cubox/setting-up-arch-linux-arm-on-cubox-sbc/#setup-network-manager","title":"Setup Network Manager","text":"<p>Network manager can act as a DHCP client, greatly simplifying networking.</p> <ul> <li> Install and enable NetworkManager:</li> </ul> <pre><code>    sudo pacman -S networkmanager\n    sudo systemctl enable NetworkManager.service\n</code></pre> <ul> <li> <p> Enable the timesyncd Service: <pre><code>sudo systemctl enable systemd-timesyncd.service\n</code></pre></p> </li> <li> <p> Reboot. You should get an IP address assigned by your router.</p> </li> <li> <p> Login as <code>alarm/alarm</code>.  Check your IP address:</p> </li> </ul> <pre><code>ip address show\n</code></pre> <ul> <li> <p> You should how have an IP address provided via DHCP.  In my case it is <code>192.168.86.250</code>.</p> </li> <li> <p> You no longer need to connect via <code>screen</code> as you can connect via SSH now:</p> </li> </ul> <pre><code>ssh alarm@alarm\n</code></pre>","tags":["hardware","sbc","linux","arch linux"]},{"location":"linux/apt-cheat-sheet/","title":"Apt Cheat Sheet","text":"<p>Last updated: 2023-01-04</p> <pre><code># update list of available packages\n$&gt; sudo apt update\n</code></pre> <pre><code># upgrade all packages that have updates\n$&gt; sudo apt upgrade\n</code></pre> <pre><code># install individual packages(s)\n$&gt; sudo apt install &lt;package(s)&gt;\n</code></pre> <pre><code># mark a manually installed package as having been \"automatically\" installed\n$&gt; sudo apt-mark auto &lt;package(s)&gt;\n</code></pre> <pre><code># list installed packages\n$&gt; sudo apt list --installed\n</code></pre> <pre><code># list upgradable packages\n$&gt; sudo apt list --upgradable\n</code></pre> <pre><code># list packages available from a given repo (e.g. see what packages a PPA provides):\n$&gt; cd /var/lib/apt/lists\n$&gt; grep ^Package: /var/lib/apt/lists/{name of ppa or repo}*_Packages\n</code></pre>","tags":["linux","apt","cheat sheet"]},{"location":"linux/dd-cheat-sheet/","title":"DD Cheat Sheet","text":"<p>Last updated: 2023-01-04</p>","tags":["linux","shell","dd","cheat sheet"]},{"location":"linux/dd-cheat-sheet/#dump-disk-to-compressed-image","title":"Dump Disk to Compressed Image","text":"<pre><code># dump a disk to a compressed disk image\nsudo dd if=/dev/sdb | gzip -c &gt; ~/my-disk.image.gz\n</code></pre>","tags":["linux","shell","dd","cheat sheet"]},{"location":"linux/shell-cheat-sheet/","title":"Shell Cheat Sheet","text":"<p>Last updated: 2023-01-04</p>","tags":["linux","shell","cheat sheet"]},{"location":"linux/shell-cheat-sheet/#write-append-text-to-a-file","title":"Write / Append Text to a File","text":"<p>You can ordinarily write or append text to a file using the <code>&gt;</code> or <code>&gt;&gt;</code> shell operators:</p> <pre><code># overwrite\necho \"Replacement Text\" &gt; myFile.txt\n</code></pre> <pre><code># append\necho \"Appended Text\" &gt;&gt; myFile.text\n</code></pre>","tags":["linux","shell","cheat sheet"]},{"location":"linux/shell-cheat-sheet/#write-append-text-to-a-protected-file","title":"Write / Append Text to a Protected File","text":"<p>If you need to write/append text to a protected file, use the <code>tee</code> command:</p> <pre><code># overwrite protected file\necho \"Replacement Text\" | sudo tee myFile.txt\n</code></pre> <pre><code># append to protected file\necho \"Appended Text\" | sudo tee -a myFile.txt\n</code></pre>","tags":["linux","shell","cheat sheet"]},{"location":"linux/shell-cheat-sheet/#file-descriptors","title":"File Descriptors","text":"<p>File descriptors are numbers that uniquely identify open files in an OS.  With Linux, the first three file descriptors have special meaning:</p> Descriptor Description 0 STDIN 1 STDOUT 2 STDERR <p>When running an program or script via a shell, you can use the redirect operator (e.g. <code>&gt;</code>) to redirect the <code>STDOUT</code> output to a file:</p> <p><pre><code># redirect \"Hello World\" to file test.txt rather than display it in the shell\necho \"Hello World\" &gt; test.txt\n</code></pre> This could be used to redirect all <code>STDOUT</code> to a file (this would ordinarily be displayed in the shell):</p> <p><pre><code># redirect all STDOUT that my-program produces to file output.log\n./my-program &gt; output.log\n</code></pre> There are times when you'll run a program or script (with redirection) and still see output in the shell.  This is because <code>STDERR</code> is still being output to the shell.</p> <p>To have all output go to a file you'll need to perform two redirects:</p> <ol> <li>Redirect <code>STDOUT</code> &gt; file</li> <li>Redirect <code>STDERR</code> &gt; <code>STDOUT</code></li> </ol> <p><pre><code># redirect all STDOUT and STDERR that my-program produces to file output.log\n./my-program &gt; output.log 2&gt;&amp;1\n</code></pre> The <code>2&gt;&amp;1</code> tells the shell to redirect <code>STDERR</code> (file descriptor 2) to <code>STDOUT</code> (file descriptor 1).  The reason you need a <code>&amp;</code> is because otherwise the shell will create a file named <code>1</code> and redirect <code>STDERR</code> output to that file.</p> <p>Warning</p> <p>The order of the two parameters is very important.  You first need to define your redirection for STDOUT before defining your direction for STDERR to STDOUT!</p> <p>If you would like to silence all output entirely do the following:</p> <p><pre><code># silence all STDOUT and STDERR that my-program produces\n./my-program &gt;/dev/null 2&gt;&amp;1\n</code></pre> This will redirect all <code>STDOUT</code> output my-program produces to the \"null sink\", basically a black hole for any output.  And it will redirect all <code>STDERR</code> output to <code>STDOUT</code>.</p> <p>Warning</p> <p>The order of the two parameters is very important.  You first need to define your redirection for <code>STDOUT</code> before defining your direction for <code>STDERR</code> to <code>STDOUT</code>!</p>","tags":["linux","shell","cheat sheet"]},{"location":"linux/shell-cheat-sheet/#exec-explained","title":"exec Explained","text":"<p>There are two main uses for <code>exec</code>:</p> <ol> <li>To run an executable or script and replace the current shell process.</li> <li>To redirect file descriptors.</li> </ol>","tags":["linux","shell","cheat sheet"]},{"location":"linux/shell-cheat-sheet/#using-exec-to-run-an-executable-or-script","title":"Using exec to Run an Executable or Script","text":"<p>What's the difference between running a command with exec vs. running it directly?  When running a command with <code>exec</code> a new child process is created (with a new PID) that replaces the current (parent) shell process.</p> <pre><code># executes program as child process of shell, shell will continue to run\n./my-program\n\n# executes program as child process of shell, this process replaces the current shell process\nexec ./my-program\n</code></pre> <p>Note</p> <p>If you are running exec on a script, the current shell is replaced by the interpreter defined in the shebang of the script (e.g. <code>#!/bin/bash</code>).</p>","tags":["linux","shell","cheat sheet"]},{"location":"linux/shell-cheat-sheet/#using-exec-to-redirect-file-descriptors","title":"Using exec to Redirect File Descriptors","text":"<p>Tip</p> <p>It's important to understand the basics of file descriptors to understand how <code>exec</code> can be used to perform redirection.</p> <p>To redirect file descriptor output, run exec without the name of a program or script.  This uses the file descriptor syntax covered previously.</p> <pre><code># redirects all future STDOUT from shell to shell.log\nexec 1&gt;shell.log\n\n# \"Hello World\" will be directed to shell.log\necho \"Hello World\"\n</code></pre> <p>Warning</p> <p>Using <code>exec</code> for file descriptor redirection will only work on POSIX compliant shells.  This will not work on <code>fish</code> shell.</p>","tags":["linux","shell","cheat sheet"]},{"location":"linux/tar-cheat-sheet/","title":"Tar Cheat Sheet","text":"<p>Last updated: 2023-01-04</p>","tags":["linux","shell","tar","cheat sheet"]},{"location":"linux/tar-cheat-sheet/#tar-parameters","title":"tar Parameters","text":"Option Description -c Creates a new archive -f Writes archive to a file, or extracts from a file.  This option always has to be entered last, since all subsequent entries are interpreted as files -x Extracts files from the archive. The files remain in the archive -t Displays a list of files in the archive -k Prevents files from being overwritten when extracting an archive -p Maintains access rights when extracting an archive -v Increases verbosity -C Changes to a directory before creating / extracting an archive -z Use gzip compression when creating / extracting an archive -j Use bzip2 compression when creating / extracting an archive -J Use xz compression when creating / extracting an archive","tags":["linux","shell","tar","cheat sheet"]},{"location":"linux/tar-cheat-sheet/#creating-an-archive-with-gzip-compression-full-paths-in-archive","title":"Creating an Archive with gzip Compression (full paths in archive)","text":"<pre><code># create tar.gz archive of specific directory\ntar -cvzpf ~/my-archive.tar.gz /path/to/dir-to-archive\n</code></pre>","tags":["linux","shell","tar","cheat sheet"]},{"location":"linux/tar-cheat-sheet/#create-an-archive-with-gzip-compression-relative-paths","title":"Create an Archive with gzip Compression (relative paths)","text":"<pre><code># create a tar.gz archive of specific directory (all paths relative to that directory)\ntar -cvzpf ~/my-archive.tar.gz -C /path/to/dir-to-archive .\n</code></pre>","tags":["linux","shell","tar","cheat sheet"]},{"location":"linux/Arch-Linux/remove-lockout-on-arch-linux/","title":"Remove Lockout on Arch Linux","text":"<p>Last updated: 2023-01-04</p> <p>If you enter in an invalid password three times, your user will be locked out and you will be unable to run <code>sudo</code> commands for 10 mins.</p> <p>To manually unlock the user:</p> <pre><code># Switch to a true root shell\nsu root\n\n# Remove the lock on the user\nfaillock --reset --user {username}\n</code></pre> <p>See also:</p> <ul> <li>https://wiki.archlinux.org/title/Security#Enforce_a_delay_after_a_failed_login_attempt</li> </ul>","tags":["linux","arch linux"]},{"location":"linux/KDE/enabling-and-disabling-kde-compositor/","title":"Enabling and Disabling KDE Compositor","text":"<p>Last updated: 2023-01-04</p>","tags":["linux","kde"]},{"location":"linux/KDE/enabling-and-disabling-kde-compositor/#check-if-compositor-is-active","title":"Check if Compositor is Active","text":"<pre><code>qdbus org.kde.KWin /Compositor org.kde.kwin.Compositing.active\n</code></pre>","tags":["linux","kde"]},{"location":"linux/KDE/enabling-and-disabling-kde-compositor/#disabling-compositor","title":"Disabling Compositor","text":"<pre><code>qdbus org.kde.KWin /Compositor org.kde.kwin.Compositing.suspend\n</code></pre>","tags":["linux","kde"]},{"location":"linux/KDE/enabling-and-disabling-kde-compositor/#enabling-compositor","title":"Enabling Compositor","text":"<pre><code>qdbus org.kde.KWin /Compositor org.kde.kwin.Compositing.resume\n</code></pre>","tags":["linux","kde"]},{"location":"linux/KDE/enabling-and-disabling-kde-compositor/#keyboard-shortcut","title":"Keyboard Shortcut","text":"<p>You can also toggle the compositor on/off using <code>alt+shift+F12</code>.</p>","tags":["linux","kde"]},{"location":"linux/Wayland/wayland-cheat-sheet/","title":"Wayland Cheat Sheet","text":"<p>Last updated: 2023-01-04</p>","tags":["linux","wayland","cheat sheet","electron"]},{"location":"linux/Wayland/wayland-cheat-sheet/#listing-applications-running-in-xwyland","title":"Listing Applications Running in XWyland","text":"<p>You can use the <code>xlsclients</code> program to view any applications that are running under XWayland.  This can be an excellent way to determine if you're running a given application natively in Wayland or via XWayland.</p> <p>Tip</p> <p>For Arch Linux install the <code>xorg-xlsclients</code> package to have access to the <code>xlsclients</code> utility.</p> <pre><code># list all applications running under xwayland\nrobert@host ~&gt; xlsclients  \nhost \u00a0electron\n</code></pre> <p>Here we can see that there is electron application running in XWayland as opposed to natively.</p>","tags":["linux","wayland","cheat sheet","electron"]},{"location":"linux/Wayland/wayland-cheat-sheet/#checking-your-current-desktop-session","title":"Checking your Current Desktop Session","text":"<p>You can check your current session by executing: <code>echo $XDG_SESSION_TYPE</code>.</p> <pre><code># explicitly output if a wayland session is running\nrobert@host ~&gt; echo $XDG_SESSION_TYPE  \nwayland\n</code></pre>","tags":["linux","wayland","cheat sheet","electron"]},{"location":"linux/Wayland/wayland-cheat-sheet/#electron-applications-in-wayland","title":"Electron Applications in Wayland","text":"<p>By default electron applications will run in XWayland.  You can override this by passing in some additional command line parameters:</p> <pre><code># older electron applications\n--enable-features=UseOzonePlatform,WebRTCPipeWireCapturer --ozone-platform=wayland\n\n# newer electron applications (electron 20+)\n--enable-features=WebRTCPipeWireCapturer --ozone-platform-hint=auto\n</code></pre> <p>Warning</p> <p>The application needs to be built against Electron 12+ for this to work!</p> <p>Often times you can copy and edit a <code>.desktop</code> file and supply these additional parameters.</p> <p>Copying .desktop file and updating it with additional parameters</p> <p>Warning</p> <p>VSCode now uses a dedicated configuration file (<code>~/.config/code-flags.conf</code>) to specify these parameters. The original process is still outlined below as a reference for older electron applications.</p> ~/.config/code-flags.conf<pre><code>--enable-features=UseOzonePlatform,WebRTCPipeWireCapturer\n--ozone-platform=wayland\n</code></pre> <p>Warning</p> <p>Chrome uses a dedicated configuration file (<code>~/.config/chrome-flags.conf</code>) to specify these parameters.</p> ~/.config/chrome-flags.conf<pre><code>--enable-features=WebRTCPipeWireCapturer\n--ozone-platform-hint=auto\n</code></pre> <p>Warning</p> <p>More modern electron applications (20+) will read from <code>~/.config/electron-flags.conf</code> but the original process is still outlined below as a reference for older electron applications.</p> ~/.config/electron-flags.conf<pre><code>--enable-features=WebRTCPipeWireCapturer\n--ozone-platform-hint=auto\n</code></pre> <pre><code># copy the .desktop file to ~/.local/share/applications\ncp /usr/share/applications/visual-studio-code.desktop ~/.local/share/applications/.\n\n# use sed to update the local .desktop file\nsed -i 's/\\/usr\\/bin\\/code/&amp; --enable-features=UseOzonePlatform,WebRTCPipeWireCapturer --ozone-platform=wayland/' ~/.local/share/applications/visual-studio-code.desktop\n</code></pre> <p>This copies the default <code>.desktop</code> file from <code>/usr/share/application</code> to a user's home directory and then updates it to include the additional command line parameters.</p> <p>The end result looks like:</p> <pre><code>[Desktop Entry]\nName=Visual Studio Code\nComment=Code Editing. Refined.\nGenericName=Text Editor\nExec=/usr/bin/code --enable-features=UseOzonePlatform,WebRTCPipeWireCapturer --ozone-platform=wayland --no-sandbox --unity-launch %F\nIcon=visual-studio-code\nType=Application\nStartupNotify=false\nStartupWMClass=Code\nCategories=Utility;TextEditor;Development;IDE;\nMimeType=text/plain;inode/directory;application/x-visual-studio-code-workspace;\nActions=new-empty-window;\nKeywords=vscode;\n\n[Desktop Action new-empty-window]\nName=New Empty Window\nExec=/usr/bin/code --enable-features=UseOzonePlatform,WebRTCPipeWireCapturer --ozone-platform=wayland --no-sandbox --new-window %F\nIcon=visual-studio-code\n</code></pre>","tags":["linux","wayland","cheat sheet","electron"]},{"location":"linux/systemd/systemd-coredumps/","title":"Systemd Core Dumps","text":"<p>Last updated: 2023-01-04</p> <p>Systemd manages core dumps for applications that crash.</p> <p>You can use <code>coredumpctl</code> to list and examine core dump files.</p>","tags":["linux","systemd"]},{"location":"linux/systemd/systemd-coredumps/#listing-core-dumps","title":"Listing Core Dumps","text":"<pre><code># list core dumps (newest first):\ncoredumpctl -r list\n</code></pre>","tags":["linux","systemd"]},{"location":"linux/systemd/systemd-coredumps/#inspecting-a-core-dump","title":"Inspecting a Core Dump","text":"<pre><code># inspect a core dump using PID\ncoredumpctl info {PID}\n</code></pre> <pre><code># output core dump to text file\ncoredumpctl info {PID} &gt; ~/my_coredump.txt\n</code></pre>","tags":["linux","systemd"]},{"location":"linux/systemd/systemd-coredumps/#cleaning-out-old-core-dumps","title":"Cleaning out old Core Dumps","text":"<pre><code># manually kick off process to clean all tmp files &gt; 3 days old, including core dumps\nsystemd-tmpfiles --clean\n</code></pre> <p>Tip</p> <p>You can also manually delete core dump files, they are located in: <code>/var/lib/systemd/coredump</code>.</p>","tags":["linux","systemd"]},{"location":"linux/systemd/systemd-journal-logging/","title":"Systemd Journal Logging","text":"<p>Last updated: 2023-01-20</p> <p>Systemd uses a logging system called \"journal\" to manage system wide logging.</p> <p>You can use <code>journalctl</code> to view, manage, and remove logs.</p>","tags":["linux","systemd"]},{"location":"linux/systemd/systemd-journal-logging/#journal-size","title":"Journal Size","text":"<pre><code># view current size of journal\njournalctl -b -u systemd-journald\n</code></pre>","tags":["linux","systemd"]},{"location":"linux/systemd/systemd-journal-logging/#follow-journal-messages","title":"Follow Journal Messages","text":"<pre><code># follow journal messages in real-time\njournalctl -f\n</code></pre>","tags":["linux","systemd"]},{"location":"linux/systemd/systemd-journal-logging/#show-journal-messages-from-boot","title":"Show Journal Messages from Boot","text":"<pre><code># show journal messages from the current boot\njournalctl -b\n</code></pre> <pre><code># show journal messages from previous boot\njournalctl -b -1 # you can put any number here to go back 'n' boots\n</code></pre>","tags":["linux","systemd"]},{"location":"linux/systemd/systemd-journal-logging/#manually-cleaning-journal","title":"Manually Cleaning Journal","text":"<pre><code># remove oldest journal entries until disk space utilization falls below 100M\njournalctl --vacuum-size=100M\n</code></pre> <pre><code># remove all journal entries older than 2 weeks\njournalctl --vacuum-time=2weeks\n</code></pre> <pre><code># remove all journal entries older than 1 day\njournalctl --vacuum-time=1days\n</code></pre> <pre><code># remove all journal entries older than 1 minute\njournalctl --vacuum-time=1m\n</code></pre> <p>See also:</p> <ul> <li><code>man journalctl</code></li> <li>https://wiki.archlinux.org/title/Systemd/Journal</li> </ul>","tags":["linux","systemd"]},{"location":"linux/systemd/systemd-resolved/","title":"Systemd Resolved","text":"<p>Last updated: 2023-01-04</p> <p>Systemd resolved is a local caching DNS provider that is used by default by NetworkManager.</p> <p>Tip</p> <p>Systemd resolved is not enabled by default for Arch Linux installations, to enable it during or post installation run the following:</p> <pre><code>sudo systemctl enable --now systemd-resolved.service\n</code></pre> <p>You can use <code>resolvectl</code> to manage Systemd resolved.</p>","tags":["linux","systemd","dns"]},{"location":"linux/systemd/systemd-resolved/#check-status","title":"Check Status","text":"<pre><code># check the status\nresolvectl status\n</code></pre> <pre><code># check statistics (cache hits / misses)\nresolvectl statistics\n</code></pre>","tags":["linux","systemd","dns"]},{"location":"linux/systemd/systemd-resolved/#run-queries","title":"Run Queries","text":"<pre><code># run a specific query\nresolvectl query www.google.com\n</code></pre>","tags":["linux","systemd","dns"]},{"location":"linux/systemd/systemd-resolved/#flush-cache","title":"Flush Cache","text":"<pre><code># flush cache\nresolvectl flush-caches\n</code></pre>","tags":["linux","systemd","dns"]},{"location":"virtualization/disk-image-shrinking-for-windows-guests/","title":"Disk Image Shrinking for Windows Guests","text":"<p>Last updated: 2023-01-04</p> <p>Tip</p> <p>Before embarking on shrinking your VM disk image first perform a general cleanup of your Windows VM.</p>","tags":["virtualization","kvm qemu","windows"]},{"location":"virtualization/disk-image-shrinking-for-windows-guests/#windows-cleanup","title":"Windows Cleanup","text":"","tags":["virtualization","kvm qemu","windows"]},{"location":"virtualization/disk-image-shrinking-for-windows-guests/#windows-sxs-cleanup","title":"Windows SxS Cleanup","text":"<p>The Windows SxS maintains an archive of windows components that have been upgraded.  Over time, this can consume a large amount of disk space.  You can run some commands to immediately wipe out all but the most recent windows components.</p> <p>Using an elevated Command Prompt or Powershell, execute the following:</p> <pre><code>Dism.exe /online /Cleanup-Image /StartComponentCleanup\n</code></pre> <p>See also:</p> <ul> <li>https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/clean-up-the-winsxs-folder</li> </ul>","tags":["virtualization","kvm qemu","windows"]},{"location":"virtualization/disk-image-shrinking-for-windows-guests/#windows-update-cache-cleanup","title":"Windows Update Cache Cleanup","text":"<ol> <li>Launch Disk Cleanup</li> <li>Click the \"Cleanup system files button\"</li> <li>Cleanup up any files related to Windows Update.</li> <li>Stop the \"Windows Update\" service</li> <li>Delete all files inside the <code>C:\\Windows\\SoftwareDistribution</code> directory.</li> </ol>","tags":["virtualization","kvm qemu","windows"]},{"location":"virtualization/disk-image-shrinking-for-windows-guests/#confirm-trim-is-enabled","title":"Confirm TRIM Is Enabled","text":"<p>Run the following: <code>fsutil behavior query DisableDeleteNotify</code>, if the result is <code>0</code> TRIM is enabled.</p>","tags":["virtualization","kvm qemu","windows"]},{"location":"virtualization/disk-image-shrinking-for-windows-guests/#zero-out-the-drive-using-sdelete","title":"Zero Out the Drive Using sdelete","text":"<ol> <li>Download sdelete from here</li> <li>Zero out the free space of the drive: <code>.\\sdelete.exe -z c:</code></li> </ol>","tags":["virtualization","kvm qemu","windows"]},{"location":"virtualization/disk-image-shrinking-for-windows-guests/#shrink-disk-image","title":"Shrink Disk Image","text":"<ol> <li>Make sure the Windows VM is shutdown.</li> <li>Run the following commands:</li> </ol> <pre><code># make backup of original disk image\ncp disk.qcow2 disk.qcow2.bak\n\n# convert the disk from qcow2 -&gt; qcow2\n# zeroed out locations will be removed from the disk image\nqemu-img convert -O qcow2 -p {disk.qcow2.bak} {disk.qcow2}\n</code></pre>","tags":["virtualization","kvm qemu","windows"]},{"location":"virtualization/installing-windows-as-a-guest-on-kvm-qemu/","title":"Installing Windows as a Guest on KVM QEMU","text":"<p>Last updated: 2023-01-04</p>","tags":["virtualization","kvm qemu","windows"]},{"location":"virtualization/installing-windows-as-a-guest-on-kvm-qemu/#prerequisites","title":"Prerequisites","text":"<ul> <li> Make sure to download an ISO for Windows.  In this example we are using an ISO for Windows Server 2022.</li> <li> Make sure to download the latest version of <code>virtio-win</code> ISO from: https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/latest-virtio/.  This will include the Windows virtio drivers and the Windows guest tools.</li> </ul> <p>Note</p> <p>The latest version at the time of this writing is <code>0.1.225</code>.  Download whatever the latest version is.  Many of the screenshots contained within might reference an older version of the <code>virtio-win</code> ISO.</p>","tags":["virtualization","kvm qemu","windows"]},{"location":"virtualization/installing-windows-as-a-guest-on-kvm-qemu/#creating-a-new-vm","title":"Creating a new VM","text":"<ul> <li> When creating a new virtual machine, make sure to select the appropriate Windows version from the OS dropdown.  This makes ensures that the HyperV enlightenments are enabled.</li> </ul> Selecting correct Windows version <ul> <li> Make sure to also select the Customize configuration before install checkbox so we can fully customize the VMs virtual hardware before starting installation.</li> </ul> Selecting \"Customize configuration before install\" checkbox","tags":["virtualization","kvm qemu","windows"]},{"location":"virtualization/installing-windows-as-a-guest-on-kvm-qemu/#configuring-vm-to-use-uefi-instead-of-legacy-bios","title":"Configuring VM to use UEFI Instead of Legacy BIOS","text":"<ul> <li> It's highly recommended to setup your new VM with UEFI.  Make sure to select the <code>UEFI x86_x64 OVMF_CODE.fd</code> firmware.</li> </ul> <p>Tip</p> <p>If you don't see this option, you will need to install your distro's OVMF package.  For Arch Linux the package is <code>edk2-ovmf</code>.</p> <p> </p> Selecting OVMF firmware to support UEFI for your VM","tags":["virtualization","kvm qemu","windows"]},{"location":"virtualization/installing-windows-as-a-guest-on-kvm-qemu/#configuring-virtual-disks-to-use-virtio","title":"Configuring Virtual Disks to use VirtIO","text":"<p>In order to improve overall VM performance, it's highly recommended to setup your virtual disks to use VirtIO.  The main benefits of this are:</p> <ul> <li>Increased performance</li> <li> <p>Passthrough ATA TRIM support (for SSDs)</p> </li> <li> <p> To do this configure configure your SATA disk with a Disk bus of <code>VirtIO</code> and a Discard mode of <code>unmap</code>.</p> </li> </ul> <p> </p> Configuring the SATA disk to use VirtIO","tags":["virtualization","kvm qemu","windows"]},{"location":"virtualization/installing-windows-as-a-guest-on-kvm-qemu/#configuring-virtual-nic-to-use-virtio","title":"Configuring Virtual NIC to use VirtIO","text":"<p>It's also recommended to configure your virtual NIC to use VirtIO.</p> <ul> <li> To do this configure configure your NIC device with a *Device model of <code>VirtIO</code>.</li> </ul> <p> </p> Configuring the NIC to use VirtIO","tags":["virtualization","kvm qemu","windows"]},{"location":"virtualization/installing-windows-as-a-guest-on-kvm-qemu/#adding-additional-cdrom-drive-for-driver-disk","title":"Adding Additional CDROM Drive for Driver Disk","text":"<p>Because we are setting up Windows to use VirtIO for both the virtual disk and the NIC we need to add another CDROM for installation.  This CDROM will be used to load the virtio drivers during the installation.</p> <ul> <li> Click the Add Hardware button to add a new CDROM to your VM.</li> <li> Configure a new CDROM drive to load <code>virtio-win</code> ISO you downloaded previously.</li> </ul> <p> </p> Adding a new CDROM to the VM <p> </p> Configuring the new CDROM to load the virtio-win ISO","tags":["virtualization","kvm qemu","windows"]},{"location":"virtualization/installing-windows-as-a-guest-on-kvm-qemu/#cpu-configuration","title":"CPU Configuration","text":"<p>Depending on your CPU you might have to perform some additional steps:</p> <ul> <li>CPU Pinning, please see: kvm-qemu-cpu-pinning</li> <li>Additional AMD CPU Configuration, please see: kvm-qemu-amd-cpu-configuration</li> </ul>","tags":["virtualization","kvm qemu","windows"]},{"location":"virtualization/installing-windows-as-a-guest-on-kvm-qemu/#configuring-qemu-guest-agent-channel","title":"Configuring QEMU Guest Agent Channel","text":"<p>To support dynamic resolution adjustments on window resizing, you'll need to add a channel for the QEMU guest agent. </p> <ul> <li> <p> Add a new channel for the QEMU guest agent.</p> </li> <li> <p>Click the Add Hardware button.</p> </li> <li>Select Channel.</li> <li>Configure the channel Name to be <code>org.qemu.guest_agent.0</code>.</li> <li>Configure the channel type to be <code>UNIX socket (unix)</code>.</li> <li>Make sure the Auto socket option is checked.</li> </ul> <p> </p> Adding a new channel for the QEMU guest agent","tags":["virtualization","kvm qemu","windows"]},{"location":"virtualization/installing-windows-as-a-guest-on-kvm-qemu/#installation","title":"Installation","text":"<ul> <li> After configuring your VM, click the Begin Installation button.  This should boot the virtual machine as if you were booting off of the Windows installation ISO.</li> </ul> Starting Windows installation after booting VM <ul> <li> Choose Custom when prompted to select the installation type.</li> </ul> Selecting \"Custom\" installation type <ul> <li> Select the Load driver option.</li> </ul> Selecting the \"Load driver\" option. <ul> <li> Load the VirtIO driver via the second CDROM drive you added to your VM.</li> </ul> Loading the VirtIO driver from the second CDROM drive. <ul> <li> Navigate to the <code>viostor</code> directory and select the correct subdirectory for your specific version of windows.  For this example we are using <code>2k22/amd64</code> which is used Windows Server 2022 x86_x64.</li> </ul> Navigating to the correct driver directory. <ul> <li> After installing the driver you should be able to see the virtual disk available for installation.  You might need to refresh the drive listing for it to fully come online and become available for installation.</li> <li> Go through the rest of the Windows installation process normally.</li> </ul>","tags":["virtualization","kvm qemu","windows"]},{"location":"virtualization/installing-windows-as-a-guest-on-kvm-qemu/#post-installation","title":"Post-Installation","text":"<p>After installing windows and logging in, you'll need install the VirtIO guest tools.  You should still have the <code>virtio-win</code> ISO in your second CDROM drive.</p> <ul> <li> Navigate to second CDROM drive and run the <code>virtio-win-guest-tools</code> executable.</li> </ul> <p> </p> Installing the VirtIO guest tools","tags":["virtualization","kvm qemu","windows"]},{"location":"virtualization/installing-windows-as-a-guest-on-kvm-qemu/#final-configuration","title":"Final Configuration","text":"<ul> <li> Shutdown the guest VM.</li> <li> Configure Virt Viewer to support dynamic resolution adjustment on window resize. Select <code>View -&gt; Scale Display -&gt; Auto resize VM with window</code>.</li> </ul> <p>Warning</p> <p>If this option is not available it means that either:</p> <ul> <li>Your QEMU guest agent channel was not configured properly.</li> <li>QEMU guest tools were not installed correctly.</li> </ul> <p> </p> Configuring virt-viewer for dynamic resolution <ul> <li> Unload the ISO from the second CDROM.</li> </ul> <p> </p> Unloading the virtio-win ISO <ul> <li> Remove the second CDROM entirely from the VM.</li> </ul> <p> </p> Removing the second CDROM <p>Tip</p> <p>You might notice that there is a maximum resolution your guest VM can scale to.  To fix this you'll need to update the video memory for your virtual video card.  This will allow the VM guest to fully display on larger resolution monitors.</p> <p>To add additional video memory, select the Video QXL hardware in your VM configuration and click on the XML tab.  Then update <code>vgamem</code> from <code>16384</code> (16MB) to <code>65536</code> (64MB).  This should provide enough video memory to fully display the guest even for high-resolution monitors.</p> <p> Installing the VirtIO guest tools </p>","tags":["virtualization","kvm qemu","windows"]},{"location":"virtualization/kvm-qemu-amd-cpu-configuration/","title":"KVM QEMU AMD CPU Configuration","text":"<p>Last updated: 2023-01-04</p> <p>There's currently an issue where the CPU feature <code>topoext</code> is not exposed from host AMD CPUs to guest VMs.  This affects the ability to use SMT (hyperthreading) on the guest VM.</p> <p>To work around this issue, you'll need to specifically configure the CPU in the virtual machine XML file:</p> <ul> <li> Set the CPU mode to <code>host-passthrough</code>.</li> <li> Make sure to <code>require</code> the <code>topoext</code> CPU feature.</li> <li> Define a CPU topology that aligns with your physical hardware.</li> </ul> <p>In this example our host system has an AMD CPU with 8 physical cores each supporting SMT for a total of 16 host CPU cores.  The goal is to allocate 8 virtual CPU cores to our VM.  Therefore the ideal topology for our VM is to have 4 virtual \"physical\" CPU cores each with 2 threads for a total of 8 virtual CPU cores.  This aligns and maps well with our host's physical hardware.</p> Virtual Machine XML Configuration File<pre><code>  &lt;cpu mode='host-passthrough' check='none'&gt;\n&lt;topology sockets='1' cores='4' threads='2'/&gt;\n&lt;feature policy='require' name='topoext'/&gt;\n&lt;/cpu&gt;\n</code></pre> <p>Tip</p> <p>You should also consider CPU pinning when thinking about your topology.  Please see: kvm-qemu-cpu-pinning for more information.</p> <p>See also:</p> <ul> <li>https://wiki.archlinux.org/title/PCI_passthrough_via_OVMF#Improving_performance_on_AMD_CPUs</li> <li>https://libvirt.org/formatdomain.html#cpu-model-and-topology</li> </ul>","tags":["virtualization","kvm qemu"]},{"location":"virtualization/kvm-qemu-cpu-pinning/","title":"KVM QEMU CPU Pinning","text":"<p>Last updated: 2023-01-04</p> <p>It can be helpful to pin virtual CPU cores to specific physical CPU cores.  In addition, AMD EPYC/Ryzen CPUs use CCXs (Core Complexes) that group together several physical CPU cores and share an L3 cache.</p> <p>There's a performance advantage to grouping virtual CPU cores into as few host physical CPU cores as possible.  Ideally, these host physical CPU cores would also be in the same CCX and share the same L3 cache.</p> <p>To determine what the CPU topography of your host machine is, you can use the following command:</p> <pre><code>lscpu -e\n</code></pre> <p>Here is an example when running <code>lscpu -e</code> on an 8C/16T Ryzen 4800U CPU.</p> <pre><code>robert@mini ~&gt; lscpu -e  \nCPU NODE SOCKET CORE L1d:L1i:L2:L3 ONLINE \u00a0\u00a0\u00a0MAXMHZ \u00a0\u00a0\u00a0MINMHZ \u00a0\u00a0\u00a0\u00a0\u00a0MHZ  0 \u00a0\u00a0\u00a00 \u00a0\u00a0\u00a0\u00a0\u00a00 \u00a0\u00a0\u00a00 0:0:0:0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0yes 1800.0000 1400.0000 1400.000  1 \u00a0\u00a0\u00a00 \u00a0\u00a0\u00a0\u00a0\u00a00 \u00a0\u00a0\u00a00 0:0:0:0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0yes 1800.0000 1400.0000 1400.000  2 \u00a0\u00a0\u00a00 \u00a0\u00a0\u00a0\u00a0\u00a00 \u00a0\u00a0\u00a01 1:1:1:0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0yes 1800.0000 1400.0000 1400.000  3 \u00a0\u00a0\u00a00 \u00a0\u00a0\u00a0\u00a0\u00a00 \u00a0\u00a0\u00a01 1:1:1:0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0yes 1800.0000 1400.0000 1400.000  4 \u00a0\u00a0\u00a00 \u00a0\u00a0\u00a0\u00a0\u00a00 \u00a0\u00a0\u00a02 2:2:2:0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0yes 1800.0000 1400.0000 1397.206  5 \u00a0\u00a0\u00a00 \u00a0\u00a0\u00a0\u00a0\u00a00 \u00a0\u00a0\u00a02 2:2:2:0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0yes 1800.0000 1400.0000 1400.000  6 \u00a0\u00a0\u00a00 \u00a0\u00a0\u00a0\u00a0\u00a00 \u00a0\u00a0\u00a03 3:3:3:0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0yes 1800.0000 1400.0000 1400.000  7 \u00a0\u00a0\u00a00 \u00a0\u00a0\u00a0\u00a0\u00a00 \u00a0\u00a0\u00a03 3:3:3:0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0yes 1800.0000 1400.0000 1400.000  8 \u00a0\u00a0\u00a00 \u00a0\u00a0\u00a0\u00a0\u00a00 \u00a0\u00a0\u00a04 4:4:4:1 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0yes 1800.0000 1400.0000 1800.000  9 \u00a0\u00a0\u00a00 \u00a0\u00a0\u00a0\u00a0\u00a00 \u00a0\u00a0\u00a04 4:4:4:1 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0yes 1800.0000 1400.0000 1400.000  10 \u00a0\u00a0\u00a00 \u00a0\u00a0\u00a0\u00a0\u00a00 \u00a0\u00a0\u00a05 5:5:5:1 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0yes 1800.0000 1400.0000 1400.000  11 \u00a0\u00a0\u00a00 \u00a0\u00a0\u00a0\u00a0\u00a00 \u00a0\u00a0\u00a05 5:5:5:1 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0yes 1800.0000 1400.0000 1400.000  12 \u00a0\u00a0\u00a00 \u00a0\u00a0\u00a0\u00a0\u00a00 \u00a0\u00a0\u00a06 6:6:6:1 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0yes 1800.0000 1400.0000 1400.000  13 \u00a0\u00a0\u00a00 \u00a0\u00a0\u00a0\u00a0\u00a00 \u00a0\u00a0\u00a06 6:6:6:1 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0yes 1800.0000 1400.0000 1400.000  14 \u00a0\u00a0\u00a00 \u00a0\u00a0\u00a0\u00a0\u00a00 \u00a0\u00a0\u00a07 7:7:7:1 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0yes 1800.0000 1400.0000 1400.000  15 \u00a0\u00a0\u00a00 \u00a0\u00a0\u00a0\u00a0\u00a00 \u00a0\u00a0\u00a07 7:7:7:1 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0yes 1800.0000 1400.0000 1400.000\n</code></pre> <p>Note</p> <p>The <code>CORE</code> column reflects the host physical CPU core.</p> <p>The <code>L3</code> column reflects which L3 cache the host physical CPU core is connected to.</p> <p>Remember that often times hyper-threading or SMT is utilized to double the number of host CPU cores available.</p> <p>In the example above, host CPU cores <code>0</code> and <code>1</code> are both located on host physical CPU core <code>0</code>.  These host physical CPU cores also use L3 cache <code>0</code>.</p> <p>If the goal is to allocate 8 virtual CPU cores to use on the guest VM.  The ideal configuration would be to use host CPU cores <code>8-15</code>.</p> <ul> <li>The host CPU cores <code>8-15</code> are located on host physical CPU cores <code>4-7</code>.</li> <li>More importantly all of these host physical CPU cores share the same L3 cache (L3 cache <code>1</code> in this case).</li> </ul> <p>In our example to properly pin the virtual CPU cores to the correct host CPU cores we would configure our VM in the following fashion:</p> Virtual Machine XML Configuration<pre><code>  &lt;vcpu placement=\"static\"&gt;8&lt;/vcpu&gt;\n&lt;cputune&gt;\n&lt;vcpupin vcpu=\"0\" cpuset=\"8\"/&gt;\n&lt;vcpupin vcpu=\"1\" cpuset=\"9\"/&gt;\n&lt;vcpupin vcpu=\"2\" cpuset=\"10\"/&gt;\n&lt;vcpupin vcpu=\"3\" cpuset=\"11\"/&gt;\n&lt;vcpupin vcpu=\"4\" cpuset=\"12\"/&gt;\n&lt;vcpupin vcpu=\"5\" cpuset=\"13\"/&gt;\n&lt;vcpupin vcpu=\"6\" cpuset=\"14\"/&gt;\n&lt;vcpupin vcpu=\"7\" cpuset=\"15\"/&gt;\n&lt;/cputune&gt;\n</code></pre> <p>Tip</p> <p>If your host machine is running an AMD EPYC/Ryzen CPU please see: kvm-qemu-amd-cpu-configuration to perform additional CPU configuration.</p> <p>See also:</p> <ul> <li>https://wiki.archlinux.org/title/PCI_passthrough_via_OVMF#CPU_pinning</li> </ul>","tags":["virtualization","kvm qemu"]},{"location":"tags/","title":"Tags","text":"","tags":[]},{"location":"tags/#apt","title":"apt","text":"<ul> <li>Apt Cheat Sheet</li> </ul>","tags":[]},{"location":"tags/#arch-linux","title":"arch linux","text":"<ul> <li>Setting up Arch Linux ARM on Cubox-i</li> <li>Remove Lockout on Arch Linux</li> </ul>","tags":[]},{"location":"tags/#azure","title":"azure","text":"<ul> <li>Using AzCopy to Copy Blobs to Azure</li> </ul>","tags":[]},{"location":"tags/#cheat-sheet","title":"cheat sheet","text":"<ul> <li>.NET CLI Cheat Sheet</li> <li>Git Cheat Sheet</li> <li>Javascript Import Export Cheat Sheet</li> <li>Lodash Cheat Sheet</li> <li>Optimizely B2C Commerce Cheat Sheet</li> <li>Optimizely CMS Cheat Sheet</li> <li>Vim Cheat Sheet</li> <li>Apt Cheat Sheet</li> <li>DD Cheat Sheet</li> <li>Shell Cheat Sheet</li> <li>Tar Cheat Sheet</li> <li>Wayland Cheat Sheet</li> </ul>","tags":[]},{"location":"tags/#code-example","title":"code example","text":"<ul> <li>Minimal .NET Console Application with IoC</li> <li>Building a React Client-Side Web Application from Scratch</li> </ul>","tags":[]},{"location":"tags/#csharp","title":"csharp","text":"<ul> <li>Cleaner Code Through Inverted Logic</li> <li>Minimal .NET Console Application with IoC</li> </ul>","tags":[]},{"location":"tags/#dd","title":"dd","text":"<ul> <li>DD Cheat Sheet</li> </ul>","tags":[]},{"location":"tags/#development","title":"development","text":"<ul> <li>Cleaner Code Through Inverted Logic</li> <li>Using AzCopy to Copy Blobs to Azure</li> <li>.NET CLI Cheat Sheet</li> <li>Minimal .NET Console Application with IoC</li> <li>Git Cheat Sheet</li> <li>Javascript Import Export Cheat Sheet</li> <li>Lodash Cheat Sheet</li> <li>Starter Template Combining Foam + Material for MkDocs</li> <li>Building a React Client-Side Web Application from Scratch</li> <li>SQL Server in a Docker Container on Linux</li> <li>Vim Cheat Sheet</li> </ul>","tags":[]},{"location":"tags/#dns","title":"dns","text":"<ul> <li>Systemd Resolved</li> </ul>","tags":[]},{"location":"tags/#docker","title":"docker","text":"<ul> <li>SQL Server in a Docker Container on Linux</li> </ul>","tags":[]},{"location":"tags/#dotnet","title":"dotnet","text":"<ul> <li>.NET CLI Cheat Sheet</li> <li>Minimal .NET Console Application with IoC</li> </ul>","tags":[]},{"location":"tags/#electron","title":"electron","text":"<ul> <li>Wayland Cheat Sheet</li> </ul>","tags":[]},{"location":"tags/#external","title":"external","text":"<ul> <li>Starter Template Combining Foam + Material for MkDocs</li> <li>Building a React Client-Side Web Application from Scratch</li> </ul>","tags":[]},{"location":"tags/#foam","title":"foam","text":"<ul> <li>Starter Template Combining Foam + Material for MkDocs</li> </ul>","tags":[]},{"location":"tags/#git","title":"git","text":"<ul> <li>Git Cheat Sheet</li> </ul>","tags":[]},{"location":"tags/#hardware","title":"hardware","text":"<ul> <li>Setting up Arch Linux ARM on Cubox-i</li> </ul>","tags":[]},{"location":"tags/#javascript","title":"javascript","text":"<ul> <li>Javascript Import Export Cheat Sheet</li> <li>Lodash Cheat Sheet</li> </ul>","tags":[]},{"location":"tags/#kde","title":"kde","text":"<ul> <li>Enabling and Disabling KDE Compositor</li> </ul>","tags":[]},{"location":"tags/#kvm-qemu","title":"kvm qemu","text":"<ul> <li>Disk Image Shrinking for Windows Guests</li> <li>Installing Windows as a Guest on KVM QEMU</li> <li>KVM QEMU AMD CPU Configuration</li> <li>KVM QEMU CPU Pinning</li> </ul>","tags":[]},{"location":"tags/#linux","title":"linux","text":"<ul> <li>SQL Server in a Docker Container on Linux</li> <li>Setting up Arch Linux ARM on Cubox-i</li> <li>Apt Cheat Sheet</li> <li>DD Cheat Sheet</li> <li>Shell Cheat Sheet</li> <li>Tar Cheat Sheet</li> <li>Remove Lockout on Arch Linux</li> <li>Enabling and Disabling KDE Compositor</li> <li>Wayland Cheat Sheet</li> <li>Systemd Core Dumps</li> <li>Systemd Journal Logging</li> <li>Systemd Resolved</li> </ul>","tags":[]},{"location":"tags/#lodash","title":"lodash","text":"<ul> <li>Lodash Cheat Sheet</li> </ul>","tags":[]},{"location":"tags/#mkdocs","title":"mkdocs","text":"<ul> <li>Starter Template Combining Foam + Material for MkDocs</li> </ul>","tags":[]},{"location":"tags/#optimizely","title":"optimizely","text":"<ul> <li>Optimizely B2C Commerce Cheat Sheet</li> <li>Optimizely CMS Braindump</li> <li>Optimizely CMS Cheat Sheet</li> </ul>","tags":[]},{"location":"tags/#react","title":"react","text":"<ul> <li>Building a React Client-Side Web Application from Scratch</li> </ul>","tags":[]},{"location":"tags/#sbc","title":"sbc","text":"<ul> <li>Setting up Arch Linux ARM on Cubox-i</li> </ul>","tags":[]},{"location":"tags/#shell","title":"shell","text":"<ul> <li>DD Cheat Sheet</li> <li>Shell Cheat Sheet</li> <li>Tar Cheat Sheet</li> </ul>","tags":[]},{"location":"tags/#sql-server","title":"sql server","text":"<ul> <li>SQL Server in a Docker Container on Linux</li> </ul>","tags":[]},{"location":"tags/#systemd","title":"systemd","text":"<ul> <li>Systemd Core Dumps</li> <li>Systemd Journal Logging</li> <li>Systemd Resolved</li> </ul>","tags":[]},{"location":"tags/#tar","title":"tar","text":"<ul> <li>Tar Cheat Sheet</li> </ul>","tags":[]},{"location":"tags/#vim","title":"vim","text":"<ul> <li>Vim Cheat Sheet</li> </ul>","tags":[]},{"location":"tags/#virtualization","title":"virtualization","text":"<ul> <li>Disk Image Shrinking for Windows Guests</li> <li>Installing Windows as a Guest on KVM QEMU</li> <li>KVM QEMU AMD CPU Configuration</li> <li>KVM QEMU CPU Pinning</li> </ul>","tags":[]},{"location":"tags/#wayland","title":"wayland","text":"<ul> <li>Wayland Cheat Sheet</li> </ul>","tags":[]},{"location":"tags/#webpack","title":"webpack","text":"<ul> <li>Building a React Client-Side Web Application from Scratch</li> </ul>","tags":[]},{"location":"tags/#windows","title":"windows","text":"<ul> <li>Disk Image Shrinking for Windows Guests</li> <li>Installing Windows as a Guest on KVM QEMU</li> </ul>","tags":[]}]}